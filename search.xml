<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络基础知识点</title>
      <link href="/2020/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>这里，有我一些学习计算机网络时的笔记，希望对你有帮助^_^</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="第一章——计算机网络概述"><a href="#第一章——计算机网络概述" class="headerlink" title="第一章——计算机网络概述"></a>第一章——计算机网络概述</h1><h2 id="1-计算机网络性能"><a href="#1-计算机网络性能" class="headerlink" title="1.计算机网络性能"></a><strong>1.计算机网络性能</strong></h2><blockquote><p><strong>1</strong>. <strong>速率</strong>：速率即数据率或比特率是计算机网络中最重要的一个性能指标。速率的单位是 b/s，或kb/s, Mb/s, Gb/s 等</p><p><strong>2</strong>. <strong>带宽</strong>：数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b/s (bit/s)。  </p><p><strong>3</strong>. <strong>吞吐量</strong>：表示在单位时间内通过某个网络（或信道、接口）的数据量。受网络的带宽或网络的额定速率的限制。 </p><p><strong>4</strong>. <strong>时延</strong>：发送数据时，数据块从结点进入到传输媒体所需要的时间。</p><p><strong>5</strong>. <strong>时延带宽积</strong>：时延带宽积 = 传播时延 *带宽</p><p><strong>6</strong>. <strong>利用率</strong>：<strong>信道利用率</strong>指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。<strong>网络利用率</strong>则是全网络的信道利用率的加权平均值。</p></blockquote><h2 id="2-计算机网络体系结构"><a href="#2-计算机网络体系结构" class="headerlink" title="2.计算机网络体系结构"></a>2.<strong>计算机网络体系结构</strong></h2><blockquote><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706213841831.png" alt="image-20200706213841831" style="zoom: 67%;" /></blockquote><h2 id="3-OSI的7层大约作用"><a href="#3-OSI的7层大约作用" class="headerlink" title="3.OSI的7层大约作用"></a>3.<strong>OSI的7层大约作用</strong></h2><h3 id="3-1-分层的好处："><a href="#3-1-分层的好处：" class="headerlink" title="3.1 分层的好处："></a>3.1 <strong>分层的好处</strong>：</h3><blockquote><p>各层之间是独立的、灵活性好、结构上可分割开、易于实现和维护、能促进标准化工作。 </p></blockquote><h3 id="3-2-OSI七层模型及其包含的协议如下"><a href="#3-2-OSI七层模型及其包含的协议如下" class="headerlink" title="3.2 OSI七层模型及其包含的协议如下:"></a>3.2 OSI七层模型及其包含的协议如下:</h3><blockquote><p><strong>物理层</strong>: 通过媒介传输比特,确定机械及电气规范,传输单位为bit，主要包括的协议为：IEE802.3 CLOCK RJ45</p><p><strong>数据链路层</strong>: 将比特组装成帧和点到点的传递,传输单位为帧,主要包括的协议为MAC VLAN PPP</p><p><strong>网络层</strong>：负责数据包从源到宿的传递和网际互连，传输单位为包,主要包括的协议为IP ARP ICMP</p><p><strong>传输层</strong>：提供端到端的可靠报文传递和错误恢复，传输单位为报文,主要包括的协议为TCP UDP</p><p><strong>会话层</strong>：建立、管理和终止会话，传输单位为SPDU，主要包括的协议为RPC NFS</p><p><strong>表示层</strong>: 对数据进行翻译、加密和压缩,传输单位为PPDU，主要包括的协议为JPEG ASII</p><p><strong>应用层</strong>: 允许访问OSI环境的手段,传输单位为APDU，主要包括的协议为FTP HTTP DNS</p></blockquote><h3 id="3-3TCP-IP-4层模型包括："><a href="#3-3TCP-IP-4层模型包括：" class="headerlink" title="3.3TCP/IP 4层模型包括："></a>3.3TCP/IP 4层模型包括：</h3><blockquote><p><strong>网络接口层</strong>：MAC VLAN</p><p><strong>网络层</strong>:IP ARP ICMP</p><p><strong>传输层</strong>:TCP UDP</p><p><strong>应用层</strong>:HTTP DNS SMTP</p></blockquote><h1 id="第二章——物理层"><a href="#第二章——物理层" class="headerlink" title="第二章——物理层"></a>第二章——物理层</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><p>物理层的主要任务描述为确定与传输媒体的接口的一些特性，即： </p><blockquote><p><strong>机械特性</strong>  指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。</p><p><strong>电气特性</strong>  指明在接口电缆的各条线上出现的电压的范围。</p><p><strong>功能特性</strong>  指明某条线上出现的某一电平的电压表示何种意义。</p><p><strong>过程特性</strong>  指明对于不同功能的各种可能事件的出现顺序</p></blockquote><h1 id="第三章——数据链路层"><a href="#第三章——数据链路层" class="headerlink" title="第三章——数据链路层"></a>第三章——数据链路层</h1><h2 id="1-数据链路层基本概念与三个基本问题"><a href="#1-数据链路层基本概念与三个基本问题" class="headerlink" title="1.数据链路层基本概念与三个基本问题"></a>1.数据链路层基本概念与三个基本问题</h2><h3 id="1-1基本概念"><a href="#1-1基本概念" class="headerlink" title="1.1基本概念"></a>1.1基本概念</h3><blockquote><p>除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。<strong>数据链路层传送的是帧</strong></p></blockquote><h3 id="1-2三个基本问题"><a href="#1-2三个基本问题" class="headerlink" title="1.2三个基本问题"></a>1.2三个基本问题</h3><blockquote><p>(1) <strong>封装成帧</strong>：封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708235705596.png" alt="image-20200708235705596" style="zoom: 50%;" /><p>(2) <strong>透明传输</strong>：发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(其十六进制编码是 1B)</p><p>(3) <strong>差错控制</strong> ：在数据链路层传送的帧中，广泛使用了循环冗余检验 CRC 的检错技术。</p></blockquote><p>仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受。“无差错接受”是指：“凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”。也就是说：“凡是接收端数据链路层接受的帧都没有传输差错”（有差错的帧就丢弃而不接受）。要做到“可靠传输”（即发送什么就收到什么）就必须再加上<strong>确认和重传机制</strong>。 </p><h2 id="2-两种情况下的数据链路层"><a href="#2-两种情况下的数据链路层" class="headerlink" title="2.两种情况下的数据链路层"></a>2.两种情况下的数据链路层</h2><h3 id="2-1使用点对点信道的数据链路层（用PPP）"><a href="#2-1使用点对点信道的数据链路层（用PPP）" class="headerlink" title="2.1使用点对点信道的数据链路层（用PPP）"></a>2.1使用点对点信道的数据链路层（用PPP）</h3><ul><li><strong>PPP 协议应满足的需求</strong> </li></ul><blockquote><p>1.简单——这是首要的要求。2.封装成帧 。3.透明性 。4.多种网络层协议。 5.多种类型链路。 6.差错检测。 7.检测连接状态。 8.最大传送单元 。9.网络层地址协商 。10.数据压缩协商 。</p></blockquote><ul><li><strong>ppp协议组成部分</strong></li></ul><blockquote><p>(1)一个将 IP 数据报封装到串行链路的方法。(接近物理层)</p><p>(2)链路控制协议 LCP (Link Control Protocol)。</p><p>(3)网络控制协议 NCP (Network Control Protocol)。（接近网络层）</p></blockquote><ul><li><strong>ppp协议的帧格式</strong></li></ul><blockquote><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710110232555.png" alt="image-20200710110232555" style="zoom: 50%;" /><p>首部与尾部的F字段是帧定界符</p></blockquote><h3 id="2-2使用广播信道的数据链路层（用CSMA-CD）"><a href="#2-2使用广播信道的数据链路层（用CSMA-CD）" class="headerlink" title="2.2使用广播信道的数据链路层（用CSMA/CD）"></a>2.2使用广播信道的数据链路层（用CSMA/CD）</h3><ul><li><strong>CSMA/CD协议</strong></li></ul><blockquote><p><strong>要点</strong>：</p><p>1.<strong>多点接入</strong>：表示许多计算机以多点接入的方式连接在一根总线上。</p><p>2.<strong>载波监听</strong>：是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。 总线上并没有什么“载波”。因此， “载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。 </p><p>3.<strong>碰撞检测</strong>：就是计算机边发送数据边检测信道上的信号电压大小。</p><p><strong>重要特性</strong>：</p><p>1.使用 CSMA/CD 协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）。</p><p>2.每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。 </p><p>3.这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。 </p></blockquote><h2 id="3-虚拟局域网-（VLAN）"><a href="#3-虚拟局域网-（VLAN）" class="headerlink" title="3.虚拟局域网 （VLAN）"></a>3.虚拟局域网 （VLAN）</h2><blockquote><p><strong>（1）</strong>一个交换机可以通过划分VLAN，形成虚拟局域网。同一VLAN中的计算机处于同一虚拟局域网里。VLAN1中的广播不会传到VLAN2。相当于把交换机划分成两个交换机。</p><p><strong>（2）</strong>不同的VLAN之间的帧会有特殊标记，所以不会互相广播</p></blockquote><h1 id="第四章——网络层"><a href="#第四章——网络层" class="headerlink" title="第四章——网络层"></a>第四章——网络层</h1><h2 id="1-网络层提供的两种服务"><a href="#1-网络层提供的两种服务" class="headerlink" title="1.网络层提供的两种服务"></a>1.网络层提供的两种服务</h2><blockquote><p><strong>（1）虚电路服务</strong>：A计算机发给B计算机的所有数据，都沿着同一条虚电路传送。</p><p><strong>（2）数据报服务</strong>：计算机发给B计算机的数据，可能沿着不同路径传送。（现在在用的服务）</p></blockquote><h2 id="2-虚拟互联网"><a href="#2-虚拟互联网" class="headerlink" title="2.虚拟互联网"></a>2.虚拟互联网</h2><blockquote><p> 使用虚拟互连网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。 </p></blockquote><h2 id="3-ip"><a href="#3-ip" class="headerlink" title="3.ip"></a>3.ip</h2><h3 id="3-1-ip协议及配套使用协议"><a href="#3-1-ip协议及配套使用协议" class="headerlink" title="3.1 ip协议及配套使用协议"></a>3.1 ip协议及配套使用协议</h3><p>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有<strong>三个协议</strong>：</p><blockquote><p>地址解析协议 ARP (Address Resolution Protocol)</p><p>网际控制报文协议 ICMP (Internet Control Message Protocol)</p><p>网际组管理协议 IGMP (Internet Group Management Protocol)</p></blockquote><h3 id="3-2-ip地址分类"><a href="#3-2-ip地址分类" class="headerlink" title="3.2 ip地址分类"></a>3.2 ip地址分类</h3><blockquote><p> ip地址分为A、B、C三类地址。A类的前1位固定为0，B类的前2位固定为10，C类的前3位固定为110。用于识别是哪类地址。图示如下</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200712145253617.png" alt="image-20200712145253617" style="zoom: 50%;" /><p>因为前面1~3位已经固定，因此A、B、C三类地址的前8位范围是：</p><blockquote><p><strong>A类</strong>：00000000<del>01111111，转为十进制就是0</del>126（127划分到了本地环回地址）</p><p><strong>B类</strong>：10000000<del>10111111，转为十进制就是128</del>191</p><p><strong>C类</strong>：11000000<del>11011111，转为十进制就是192</del>223</p></blockquote><p><strong>分类的目的</strong>：满足不同用户的需求，有些可能网络号需求多，有些电脑连接多。</p></blockquote><h3 id="3-3子网掩码"><a href="#3-3子网掩码" class="headerlink" title="3.3子网掩码"></a>3.3子网掩码</h3><blockquote><p>网络号字段全置1，主机号字段全置0</p><p><strong>（1）默认</strong>：<strong>A类</strong>：255.0.0.0  ，<strong>B类</strong>：255.255.0.0  ，<strong>C类</strong>：255.255.255.0</p><p><strong>（2）子网划分：</strong></p><p>当C类地址还需要进行子网划分时，子网掩码就不一定是255.255.255.0了。</p><p>比如有200台计算机使用C类网络，但是需要每100台使用一个子网，比如192.168.0.00000000<del>192.168.0.011111111为一子网，192.168.0.10000000</del>192.168.0.111111111为另一子网。即C类网络主机号的第一位划分到网络号了，此时子网掩码是255.255.255.10000000，即255.255.255.128。据此，不同划分情况时，子网掩码后面8位数值可能是128、192、224、240、248、252 </p><p><strong>注意</strong>：划分的子网主机号部分字段不可以全为1或者全为0。全为1或者全为0有特殊用处。</p><p><strong>（3）网段合并：</strong></p><p>简单来说，就是通过改变子网的数值，重新划分网络号和主机号（网络位置1，主机位置0）</p><p><strong>例子1</strong>：将 <u>192.168.0.0，netmask:255.255.255.0</u> 和 <u>192.168.1.0,netmask:255.255.255.0</u> 合并。</p><p>192.168.0.0—&gt;11000000.10101000.00000000.00000000</p><p>255.255.255.0 —&gt;11111111.11111111.11111111.00000000</p><p>192.168.1.0—&gt;11000000.10101000.00000001.00000000</p><p>255.255.255.0 —&gt;11111111.11111111.11111111.00000000</p><p>要合并网段，就要使得两个ip地址的网络号相同，因此子网掩码就要改变（因为子网掩码就是用来标识网络号和主机号的）</p><p>可以看到连个的ip地址不同在于：</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200714173449771.png" alt="image-20200714173449771" style="zoom:67%;" /><p>因此网络号要避开这两位，因此子网掩码应该变为11111111.11111111.11111110.00000000—&gt;255.255.254.0</p></blockquote><h2 id="4-ip和MAC"><a href="#4-ip和MAC" class="headerlink" title="4.ip和MAC"></a>4.ip和MAC</h2><blockquote><p> ip地址决定了数据包的起点和终点，MAC地址决定了数据帧的下一跳是哪里。</p></blockquote><h2 id="5-路由选择协议"><a href="#5-路由选择协议" class="headerlink" title="5.路由选择协议"></a>5.路由选择协议</h2><p>（1）<strong>内部网关协议</strong>（在区域内）</p><blockquote><p><strong>RIP协议</strong>：动态路由协议，根据路由器数量选择路径。每30秒更新一次路由表</p><p><strong>OSPF协议</strong>：动态路由协议，根据带宽选择路径。</p></blockquote><p>（2）<strong>外部网关协议</strong></p><blockquote><p><strong>BGP协议</strong>：BGP 是不同自治系统的路由器之间交换路由信息的协议。 </p></blockquote><p>（3）<strong>三个协议之间的关系</strong>：</p><blockquote><p>三个协议统称<strong>ip</strong>协议，RIP和OSPF协议是自治系统（AS）内部路由的选择协议，不同自治系统（AS）之间的通信是用BGP协议。</p><p>如下图所示</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200718151935682.png" alt="image-20200718151935682" style="zoom: 50%;" /></blockquote><h1 id="第五章——传输层"><a href="#第五章——传输层" class="headerlink" title="第五章——传输层"></a>第五章——传输层</h1><p>两个重点协议：</p><blockquote><p>1.TCP:对数据进行分段、编号，建立会话，是可靠传输。比如QQ传文件，访问网址，下载文件<br>2.UDP:一个数据包就能完成数据通信，不建立会话，是不可靠传输。比如QQ聊天，多播</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客之——[hexo+github]</title>
      <link href="/2020/07/20/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E2%80%94%E2%80%94%5Bhexo+github%5D/"/>
      <url>/2020/07/20/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E2%80%94%E2%80%94%5Bhexo+github%5D/</url>
      
        <content type="html"><![CDATA[<p>教你从0开始搭建博客</p><a id="more"></a><h1 id="一、hexo和github是什么？"><a href="#一、hexo和github是什么？" class="headerlink" title="一、hexo和github是什么？"></a>一、<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>和<a href="https://github.com/" target="_blank" rel="noopener">github</a>是什么？</h1><blockquote><p>一般网站需要两个东西   程序+服务器（放程序的地方) </p><p><strong>hexo</strong> 实际上可以看做一个程序，是用来生成博客页面  比如主页index.html </p><p><strong>github</strong>仓库相当于服务器，存放hexo生成的index.html等文件的地方</p><p>在本地电脑上用hexo生成了博客页面，写好文章，然后上传到github的仓库，别人就可以访问仓库下的页面了，也就是访问博客</p></blockquote><h1 id="二、搭建流程-Tip"><a href="#二、搭建流程-Tip" class="headerlink" title="二、搭建流程^Tip"></a>二、搭建流程<a href="提前说一下，这个流程短则一两个小时可以搞掂，长则八九个小时，甚至一两天（因为可能有各种各样的问题。。。），大家不要轻易放弃，遇到这里没提及到的问题请自行搜索解决方法">^Tip</a></h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><ul><li><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><blockquote><p>node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript 运行环境。</p><p>下载地址：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a>      （一般下载LTS版，即长期支持版）</p></blockquote></li><li><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><blockquote></blockquote></li><li><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><blockquote></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建与运营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yilia主题使用方法</title>
      <link href="/2020/07/20/yilia%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2020/07/20/yilia%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这里，有yilia主题的配置方法及一些问题的解决方法，希望对你有帮助^_^</p><a id="more"></a><ul><li><strong>置顶文章、文章阅读数统计、鼠标点击小红心的设置以及一些其他的功能添加，<a href="http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/" target="_blank" rel="noopener">点这里</a></strong></li></ul><blockquote><p>注意：文章中下图这个地方有错，因为不蒜子域名有变</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200707013732926.png" alt="image-20200707013732926"></p><p>变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script  async  src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>改背景，加头像旋转效果，<a href="https://qianlei6148.github.io/2018/09/30/hexo模版yilia左侧添加背景/" target="_blank" rel="noopener">点这里</a></strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建与运营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础知识点</title>
      <link href="/2020/07/20/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/07/20/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<div align="center">————这里，有MySQL的一些基础知识点^_^————</div><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>注：此博客内容基于《MySQL必知必会》一书，下载链接：<a href="https://pan.baidu.com/s/1phUYbp982A-aGwWTiGosKw" target="_blank" rel="noopener">https://pan.baidu.com/s/1phUYbp982A-aGwWTiGosKw</a> 提取码:4d7l</em></p><p>个人喜欢在学习一样新东西之前先了解它是什么、它有什么用、为什么要学它、大约怎么学。不然学起来云里雾里，心肌梗塞的感觉。<br>那么现在先回答一下上面的问题：</p><blockquote><p><strong>1.它是什么：</strong>MySQL其实是一个数据库管理系统，可以理解为一种数据库软件。 </p></blockquote><blockquote><p><strong>2.它有什么用：</strong>平时我们接触的很多东西都与数据库有关，比如你在学校的学籍信息系统通过你的学号查询你的信息，就是通过访问学校创建的数据库来查询的。而MySQL就相当于访问的工具。  </p></blockquote><blockquote><p><strong>3.为什么要学它：</strong>因为前面说的，我们日常生活中有许许多多的数据，我们要学会怎么去查看，获取等。  </p></blockquote><blockquote><p><strong>4.大约怎么学：</strong></p><blockquote><p>1.安装MySQL，微信搜索“<strong>软件安装管家</strong>”，软件目录里有多个MySQL版本的下载地址以及安装教程，最后那个Navicat Premium是一个将数据库可视化的软件。</p><p>2.建立《MySQL必知必会》用到的数据库，后面学习需要用，就像学习excel一样，需要有一个表格来处理。《MySQL必知必会》后面的附录B有介绍。也可参考博客：<a href="https://blog.csdn.net/x__Sherlock/article/details/104223646" target="_blank" rel="noopener">https://blog.csdn.net/x__Sherlock/article/details/104223646</a></p><p>3.学习MySQL知识以及处理命令</p></blockquote></blockquote><h1 id="第一章——了解SQL"><a href="#第一章——了解SQL" class="headerlink" title="第一章——了解SQL"></a>第一章——了解SQL</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL:"></a>SQL:</h2><blockquote><p>结构化查询语言（Structured Query Language），是一种专门用来与数据库通信的语言</p></blockquote><h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h2><blockquote><p>保存有组织的数据的容器</p></blockquote><h2 id="数据库组成"><a href="#数据库组成" class="headerlink" title="数据库组成"></a>数据库组成</h2><blockquote><ol><li><p><strong>表：</strong>某种特定类型数据的结构化清单</p><blockquote><p><strong>表名:</strong> 数据库中的每个表都有一个名字，用来标识自己  </p><p><strong>列和数据类型：</strong>列中存储表的部分信息，比如顾客地址，号码  </p><p><strong>行:</strong>例如，顾客表可以每行存储一个顾客。表中的行数为记录的总数  </p><p><strong>主键：</strong>占据一列，用于标识行  </p></blockquote></li></ol></blockquote><h1 id="第二章——MySQL简介"><a href="#第二章——MySQL简介" class="headerlink" title="第二章——MySQL简介"></a>第二章——MySQL简介</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><blockquote><p>含义：是一种DBMS（数据库管理系统），即它是一种数据库软件</p><p>数据的所有存储、检索、管理和处理实际上是由数据库软件——DBMS（数据库管理系统）完成的</p></blockquote><h1 id="第三章——使用MySQL"><a href="#第三章——使用MySQL" class="headerlink" title="第三章——使用MySQL"></a>第三章——使用MySQL</h1><p><em>注意：1.MySQL命令用;或\g结束，换句话说，仅按Enter不执行命令 2.输入quit或exit退出命令行实用程序。</em></p><h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1.基本命令"></a>1.基本命令</h2><h3 id="1-1创建新数据库"><a href="#1-1创建新数据库" class="headerlink" title="1.1创建新数据库"></a>1.1创建新数据库</h3><blockquote><p>如下，创建一个名为“test”的数据库<br><code>create database test;</code></p></blockquote><h3 id="1-2查看数据库"><a href="#1-2查看数据库" class="headerlink" title="1.2查看数据库"></a>1.2查看数据库</h3><blockquote><p><code>show databases;</code></p></blockquote><h3 id="1-3使用某个数据库"><a href="#1-3使用某个数据库" class="headerlink" title="1.3使用某个数据库"></a>1.3使用某个数据库</h3><blockquote><p><strong>格式</strong>：“use 数据库名字;”，比如下面是使用数据库“test”<br><code>use test;</code></p></blockquote><h3 id="1-4查看数据库的表"><a href="#1-4查看数据库的表" class="headerlink" title="1.4查看数据库的表"></a>1.4查看数据库的表</h3><blockquote><p><code>show tables;</code><br>查看数据库的表之前需要先“use”数据库，指明需要显示的数据库，如下<br><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/1.PNG" alt="1"></p></blockquote><h3 id="1-5查看表的列信息"><a href="#1-5查看表的列信息" class="headerlink" title="1.5查看表的列信息"></a>1.5查看表的列信息</h3><blockquote><p><code>show columns from customers;</code>或<code>describe customers;</code><br>返回的是每一列的信息，即字段名、数据类型、是否允许NULL、键信息、默认值以及其他信息<br>显示结果如下</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/3.PNG" alt="3"></p><p>下图为customers表，自己比较一下</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/2.PNG" alt="2">  </p></blockquote><h1 id="第四章——检索数据"><a href="#第四章——检索数据" class="headerlink" title="第四章——检索数据"></a>第四章——检索数据</h1><h2 id="1-简单检索"><a href="#1-简单检索" class="headerlink" title="1.简单检索"></a>1.简单检索</h2><h3 id="1-1检索单列"><a href="#1-1检索单列" class="headerlink" title="1.1检索单列"></a>1.1检索单列</h3><blockquote><p><strong>例子</strong>：<code>select prod_name from products;</code><br><strong>解释</strong>：上述语句利用SELECT语句从 products表中检索一个名为prod_name的列。</p></blockquote><h3 id="1-2检索多个列"><a href="#1-2检索多个列" class="headerlink" title="1.2检索多个列"></a>1.2检索多个列</h3><blockquote><p><strong>例子</strong>：<code>select prod_id,prod_name,prod_price from products;</code><br><strong>解释</strong>：上述语句利用SELECT语句从products表中检索名为 prod_id,prod_name,prod_price 的三个列。</p></blockquote><h3 id="1-3检索所有列"><a href="#1-3检索所有列" class="headerlink" title="1.3检索所有列"></a>1.3检索所有列</h3><blockquote><p><strong>例子</strong>：<code>select * from products;</code><br><strong>解释</strong>：上述语句利用SELECT语句从products表中检索所有列。</p></blockquote><h3 id="1-4检索不同行"><a href="#1-4检索不同行" class="headerlink" title="1.4检索不同行"></a>1.4检索不同行</h3><blockquote><p><strong>例子</strong>：<code>select distinct vend_id from products;</code></p><p><strong>解释</strong>：上述语句利用SELECT语句从products表中检索vend_id列不同的行。输出看下图</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706133534777.png" alt="image-20200706133534777"></p><p>对比下图<code>select vend_id from products;</code>的输出结果</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706133958660.png" width="100px"></blockquote><h2 id="2-限制结果检索"><a href="#2-限制结果检索" class="headerlink" title="2.限制结果检索"></a>2.限制结果检索</h2><h3 id="2-1限制行数"><a href="#2-1限制行数" class="headerlink" title="2.1限制行数"></a>2.1限制行数</h3><blockquote><p><strong>例子</strong>：<code>select vend_id from products limit 5;</code></p><p><strong>解释</strong>：上述语句利用SELECT语句从products表中检索vend_id前五行。输出看下图</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706140153243.png" alt="image-20200706140153243"></p><p><strong>例子</strong>：<code>select vend_id from products limit 5,5;</code></p><p><strong>解释</strong>：上述语句利用SELECT语句从products表中检索vend_id 的6~10行（因为第一行为行0，不是行1，类似c语言的数组元素定义）。输出看下图</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706140433491.png" alt="image-20200706140433491"></p></blockquote><h3 id="2-2使用完全限定的表名"><a href="#2-2使用完全限定的表名" class="headerlink" title="2.2使用完全限定的表名"></a>2.2使用完全限定的表名</h3><blockquote><p><strong>例子</strong>：1.<code>select products.prod_name from products;</code></p><p>​            2.<code>select products.prod_name from test.products;</code>  (test是我存放这些表的)</p><p><strong>解释</strong>：1和2与<code>select prod_name from products;</code>功能一样至于有什么特殊用处，我还不知道。。。</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706141931838.png" width="100px"></blockquote><h1 id="第五章——排序检索数据"><a href="#第五章——排序检索数据" class="headerlink" title="第五章——排序检索数据"></a>第五章——排序检索数据</h1><h2 id="1-根据一个列排序"><a href="#1-根据一个列排序" class="headerlink" title="1.根据一个列排序"></a>1.根据一个列排序</h2><blockquote><p><strong>例子</strong>：<code>select prod_name from products order by prod_name;</code></p><p><strong>解释</strong>：上述语句将products表中prod_name列排序输出。（按照字母排序）</p></blockquote><h2 id="2-根据多个列排序"><a href="#2-根据多个列排序" class="headerlink" title="2.根据多个列排序"></a>2.根据多个列排序</h2><blockquote><p><strong>例子</strong>：<code>select prod_id,prod_price,prod_name from products order by prod_price,prod_name;</code></p><p><strong>解释</strong>：上述语句将products表中prod_id,prod_price,prod_name三列根据prod_price,prod_name排序输出。（先按照prod_price排序，prod_price相同的，按照prod_name排），输出如下图</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706161619491.png" width="300px"></blockquote><h2 id="3-指定排序方向"><a href="#3-指定排序方向" class="headerlink" title="3.指定排序方向"></a>3.指定排序方向</h2><blockquote><p>排序方向指升序还是降序，默认升序，需要降序的话需要用到desc关键字</p><p><strong>例子</strong>：<code>select prod_id,prod_price,prod_name from products order by prod_price desc,prod_name;</code></p><p><strong>解释</strong>：上述语句将products表中prod_id,prod_price,prod_name三列根据prod_price降序,prod_name升序，排序输出。</p></blockquote><h2 id="4-排序并限制输出数量"><a href="#4-排序并限制输出数量" class="headerlink" title="4.排序并限制输出数量"></a>4.排序并限制输出数量</h2><blockquote><p><strong>例子</strong>：<code>select prod_price from products order by prod_price desc limit 1;</code></p><p><strong>解释</strong>：上述语句将products表中prod_price列根据prod_price降序排序输出，并指输出一个。比如生活中需要找到最贵的选项。</p></blockquote><h1 id="第六章——过滤数据"><a href="#第六章——过滤数据" class="headerlink" title="第六章——过滤数据"></a>第六章——过滤数据</h1><p><em>本章将讲授如何使用 SELECT 语句的  WHERE 子句指定搜索条件</em></p><h2 id="1-相等检查"><a href="#1-相等检查" class="headerlink" title="1.相等检查"></a>1.相等检查</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> prod_price=<span class="number">2.50</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name,prod_price两列，但只显示prod_price=2.50的行。输出看下图</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200707131149667.png" alt="image-20200707131149667"></p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> prod_name=<span class="string">'fuses'</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name,prod_price两列，但只显示prod_name=’fuses’的行(因为是字符串，需要用单引号)。</p></blockquote><h2 id="2-范围值检查"><a href="#2-范围值检查" class="headerlink" title="2.范围值检查"></a>2.范围值检查</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> prod_price <span class="keyword">between</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name,prod_price两列，但只显示5&lt;=prod_price&lt;=10的行。</p></blockquote><h2 id="3-空值检查"><a href="#3-空值检查" class="headerlink" title="3.空值检查"></a>3.空值检查</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> prod_price <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name,prod_price两列，但只显示prod_price为空的行（注意：0不是空）。</p></blockquote><h2 id="4-其他的where子句操作符"><a href="#4-其他的where子句操作符" class="headerlink" title="4.其他的where子句操作符"></a>4.其他的where子句操作符</h2><blockquote><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200707132256772.png" alt="image-20200707132256772" style="zoom: 67%;" /></blockquote><h2 id="5-一些注意点："><a href="#5-一些注意点：" class="headerlink" title="5.一些注意点："></a>5.一些注意点：</h2><blockquote><p>1.NULL值的行在匹配或不匹配具体数值是，不会返回。</p><p>2.where 与order by 一起用时，where需要放在order by 前面。例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> prod_price=<span class="number">2.50</span> <span class="keyword">order</span> <span class="keyword">by</span> prod_name <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>输出如下</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200707134058952.png" alt="image-20200707134058952"></p></blockquote><h1 id="第七章——数据过滤"><a href="#第七章——数据过滤" class="headerlink" title="第七章——数据过滤"></a>第七章——数据过滤</h1><p>(这名字咋和第六章这么像呢)</p><p><em>本章讲授如何组合WHERE子句以建立功能更强的更高级的搜索条件。我们还将学习如何使用NOT和IN操作符。</em></p><h2 id="1-and操作符"><a href="#1-and操作符" class="headerlink" title="1.and操作符"></a>1.and操作符</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> vend_id=<span class="number">1003</span> <span class="keyword">and</span> prod_price&lt;=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name,prod_price两列，但只显示同时满足vend_id=1003 和 prod_price&lt;=10的行。</p></blockquote><h2 id="2-or操作符"><a href="#2-or操作符" class="headerlink" title="2.or操作符"></a>2.or操作符</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> vend_id=<span class="number">1003</span> <span class="keyword">or</span> vend_id=<span class="number">1002</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name,prod_price两列，但只显示满足vend_id=1003 或 vend_id=1002的行。</p></blockquote><h2 id="3-and与or优先级"><a href="#3-and与or优先级" class="headerlink" title="3.and与or优先级"></a>3.and与or优先级</h2><blockquote><p>and的优先级大于or，与加减乘除优先级类似，and相当于乘除，or加减</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> vend_id=<span class="number">1002</span> <span class="keyword">or</span> vend_id=<span class="number">1003</span> <span class="keyword">and</span> prod_price&gt;=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：输出显示prod_name,prod_price两列，但只显示满足vend_id=1003 and prod_price&gt;=10 或 vend_id=1002的行。</p><p>可以通过加括号控制计算顺序，比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> (vend_id=<span class="number">1002</span> <span class="keyword">or</span> vend_id=<span class="number">1003</span>) <span class="keyword">and</span> prod_price&gt;=<span class="number">10</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="4-in操作符"><a href="#4-in操作符" class="headerlink" title="4.in操作符"></a>4.in操作符</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> vend_id <span class="keyword">in</span> (<span class="number">1003</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name,prod_price两列，但只显示满足vend_id=1003 或 vend_id=1002的行。其实，他的功能和<code>select prod_name,prod_price from products where vend_id=1003 or vend_id=1002;</code>是一样的。</p><p><strong>相对于or的优点：</strong></p><blockquote><p>1.在使用长的合法选项清单时， in操作符的语法更清楚且更直观。<br>2.在使用in时，计算的次序更容易管理（因为使用的操作符更少）。<br>3.in操作符一般比OR操作符清单执行更快。<br>4.in的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句。  </p></blockquote></blockquote><h2 id="5-not操作符"><a href="#5-not操作符" class="headerlink" title="5.not操作符"></a>5.not操作符</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> vend_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1003</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示vend_id=1003 或 vend_id=1002 之外的行。</p></blockquote><h1 id="第八章——用通配符进行过滤"><a href="#第八章——用通配符进行过滤" class="headerlink" title="第八章——用通配符进行过滤"></a>第八章——用通配符进行过滤</h1><p><em>本章介绍什么是通配符、如何使用通配符以及怎样使用LIKE操作符进行通配搜索，以便对数据进行复杂过滤。</em></p><p><strong>通配符</strong>：用来匹配值的一部分的特殊字符  。</p><p><strong>搜索模式</strong>：由字面值、通配符或两者组合构成的搜索条件。  比如直接相等匹配和使用通配符匹配是两种搜索模式。</p><h2 id="1-like操作符（是一种谓词"><a href="#1-like操作符（是一种谓词" class="headerlink" title="1.like操作符（是一种谓词)"></a>1.like操作符（是一种谓词)</h2><blockquote><p>为在搜索子句中使用通配符，必须使用like操作符。like指示MySQL，后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。 （就是用来告诉MySQL搜索模式的）</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200707151702531.png" alt="image-20200707151702531" style="zoom:80%;" /> </blockquote><h2 id="2-百分号（-）通配符"><a href="#2-百分号（-）通配符" class="headerlink" title="2.百分号（%）通配符"></a>2.百分号（%）通配符</h2><blockquote><p>在搜索串中， %表示任何字符出现任意次数。  </p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id,prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'jet%'</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name中以jet开头的行。</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id,prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'%anvil%'</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name中包含jet的行。</p></blockquote><h2 id="3-下划线（-）通配符"><a href="#3-下划线（-）通配符" class="headerlink" title="3.下划线（_）通配符"></a>3.下划线（_）通配符</h2><blockquote><p>与下划线的用途与%一样，但下划线只匹配<strong>单个字符</strong>而不是多个字符 。</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id,prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'_ ton anvil'</span>;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708153049199.png" alt="image-20200708153049199" style="zoom:80%;" /><p><strong>解释</strong>：”_“的地方只可以有一个字符。对比一下下面的例子</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id,prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'% ton anvil'</span>;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708153252854.png" alt="image-20200708153252854" style="zoom: 80%;" /></blockquote><h1 id="第九章——用正则表达式进行搜索"><a href="#第九章——用正则表达式进行搜索" class="headerlink" title="第九章——用正则表达式进行搜索"></a>第九章——用正则表达式进行搜索</h1><p><em>本章将学习如何在MySQL WHERE子句内使用正则表达式来更好地控制数据过滤。用到  regexp 操作符</em></p><h2 id="1-基本字符匹配"><a href="#1-基本字符匹配" class="headerlink" title="1.基本字符匹配"></a>1.基本字符匹配</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name regexp <span class="string">'1000'</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name中包含1000的行。</p></blockquote><h2 id="2-进行或匹配"><a href="#2-进行或匹配" class="headerlink" title="2.进行或匹配"></a>2.进行或匹配</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name regexp <span class="string">'1000|2000'</span>;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：显示prod_name中包含1000或2000的行。</p></blockquote><h2 id="3-匹配几个字符之一"><a href="#3-匹配几个字符之一" class="headerlink" title="3.匹配几个字符之一"></a>3.匹配几个字符之一</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name regexp <span class="string">'[123] ton'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708160503106.png" alt="image-20200708160503106"></p><p><strong>解释</strong>：显示prod_name中包含”1 ton”、”2 ton”  或者”3 ton“的行。</p></blockquote><h2 id="4-匹配范围"><a href="#4-匹配范围" class="headerlink" title="4.匹配范围"></a>4.匹配范围</h2><blockquote><p>上面的<code>select prod_name from products where prod_name regexp &#39;[123] ton&#39;;</code>还可以换成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name regexp <span class="string">'[1-3] ton'</span>;</span><br></pre></td></tr></table></figure><p>还有字母也可以，比如[a-z]</p></blockquote><h2 id="5-匹配特殊字符"><a href="#5-匹配特殊字符" class="headerlink" title="5.匹配特殊字符"></a>5.匹配特殊字符</h2><blockquote><p>比如<code>.</code> ， <code>|</code>  ， <code>[]</code>  ，这些有特殊含义的字符，需要用<code>\\</code>来进行转义</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name regexp <span class="string">'\\.'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708161841862.png" alt="image-20200708161841862"></p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name regexp <span class="string">'.'</span>;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708161928028.png" alt="image-20200708161928028" style="zoom:80%;" /><p><strong>解释</strong>：因为<code>.</code>在regexp操作中，代表任意字符，如果不在前面，MySQL就以为你想搜索任意字符</p></blockquote><h2 id="6-匹配字符类"><a href="#6-匹配字符类" class="headerlink" title="6.匹配字符类"></a>6.匹配字符类</h2><blockquote><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708163653726.png" alt="image-20200708163653726" style="zoom:67%;" /><p><strong>例子：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name regexp <span class="string">'[:upper:]'</span>;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708163958227.png" alt="image-20200708163958227" style="zoom:80%;" /><p><strong>解释</strong>:显示prod_name中包含大写字母的行。</p></blockquote><h2 id="7-匹配多次出现"><a href="#7-匹配多次出现" class="headerlink" title="7.匹配多次出现"></a>7.匹配多次出现</h2><blockquote><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708171249820.png" alt="image-20200708171249820" style="zoom:80%;" /><p><strong>例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select prod_name from products where prod_name regexp &#39;\\([0-9] sticks?\\)&#39;;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708171613118.png" alt="image-20200708171613118" style="zoom:80%;" /><p><strong>解释</strong>：<code>\\(</code>  匹配  <code>(</code> ，<code>[0-9]</code>匹配任意数字（这个例子中为1和5），<code>sticks?</code>匹配<code>stick</code>和<code>sticks</code>（s后的?使s可选，因为?匹配它前面的任何字符的0次或1次出现），<code>\\)</code>匹配<code>)</code>。  </p><p><strong>例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select prod_name from products where prod_name regexp &#39;[[:digit:]]&#123;4&#125;&#39;;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708172834824.png" alt="image-20200708172834824" style="zoom:80%;" /><p><strong>解释</strong>：<code>[[:digit:]]{4}</code>匹配连在一起的任意4位数字。</p></blockquote><h2 id="8-定位符"><a href="#8-定位符" class="headerlink" title="8.定位符"></a>8.定位符</h2><blockquote><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708173605982.png" alt="image-20200708173605982" style="zoom:80%;" /><p>*注意：^的双重用途 ^有两种用法。在集合中（用[和]定义），用它来否定该集合，否则，用来指串的开始处。  *</p><p><strong>例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select prod_name from products where prod_name regexp &#39;^[0-9\\.]&#39;;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708174236468.png" alt="image-20200708174236468" style="zoom:80%;" /><p><strong>解释</strong>：<code>^[0-9\\.]</code>匹配0到9，或者<code>.</code>为开头的prod_name,<code>^[0-9\\.]</code>也可写成<code>^[123456789\\.]</code></p><p><strong>例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select prod_name from products where prod_name regexp &#39;[[:&lt;:]]t&#39;;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708174614522.png" alt="image-20200708174614522" style="zoom:80%;" /><p><strong>解释</strong>：<code>[[:&lt;:]]t</code>匹配t开头的词。</p></blockquote><h1 id="第十章——创建计算字段"><a href="#第十章——创建计算字段" class="headerlink" title="第十章——创建计算字段"></a>第十章——创建计算字段</h1><p>*本章介绍什么是计算字段，如何创建计算字段以及怎样从应用程序中使用别名引用它们。  *</p><h2 id="1-拼接字段"><a href="#1-拼接字段" class="headerlink" title="1.拼接字段"></a>1.拼接字段</h2><blockquote><p>使用<strong>concat</strong>函数</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span> (vend_name,<span class="string">'('</span>,vend_country,<span class="string">')'</span>) <span class="keyword">from</span> vendors;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708182831071.png" alt="image-20200708182831071" style="zoom:80%;" /><p><strong>解释</strong>：Concat()需要一个或多个指定的串，各个串之间用逗号分隔。上面的语句连接了4个元素。</p></blockquote><h2 id="2-使用别名"><a href="#2-使用别名" class="headerlink" title="2.使用别名"></a>2.使用别名</h2><blockquote><p>使用<strong>as</strong>关键字</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span> (vend_name,<span class="string">'('</span>,vend_country,<span class="string">')'</span>) <span class="keyword">as</span> vend_title <span class="keyword">from</span> vendors;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708183646269.png" alt="image-20200708183646269" style="zoom:80%;" /><p><strong>解释</strong>：这不用解释了吧？</p></blockquote><h2 id="3-执行算数计算"><a href="#3-执行算数计算" class="headerlink" title="3.执行算数计算"></a>3.执行算数计算</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id,quantity,item_price,quantity*item_price <span class="keyword">as</span> expanded_price <span class="keyword">from</span> orderitems <span class="keyword">where</span> order_num=<span class="number">20005</span>;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200708190316956.png" alt="image-20200708190316956" style="zoom:80%;" /><p><strong>解释</strong>：这也不用解释了吧？加减乘除就是<code>##-*/</code>，也可以加括号。</p></blockquote><h1 id="第十一章——使用数据处理函数"><a href="#第十一章——使用数据处理函数" class="headerlink" title="第十一章——使用数据处理函数"></a>第十一章——使用数据处理函数</h1><p><em>本章介绍什么是函数， MySQL支持何种函数，以及如何使用这些函数。</em></p><h2 id="1-文本处理函数"><a href="#1-文本处理函数" class="headerlink" title="1.文本处理函数"></a>1.文本处理函数</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,<span class="keyword">upper</span>(vend_name) <span class="keyword">as</span> vend_name_upcase <span class="keyword">from</span> vendors;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709214317541.png" alt="image-20200709214317541" style="zoom: 80%;" /><p><strong>解释</strong>：upper()函数将文本装换为大写。</p><p>下面列举了一些常用函数</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709214548544.png" alt="image-20200709214548544" style="zoom:67%;" /><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709214615810.png" alt="image-20200709214615810" style="zoom:67%;" /><p>上面列举的函数中，有个特别有趣的函数：soundex（）函数。</p><p>soundex是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。 作用是根据发音来查找数据。</p><p> <strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact <span class="keyword">from</span> customers <span class="keyword">where</span> <span class="keyword">soundex</span>(cust_contact)=<span class="keyword">soundex</span>(<span class="string">'Y Lie'</span>);</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709220135560.png" alt="image-20200709220135560" style="zoom:80%;" /><p>因为Y.Lee和Y.Lie发音相似，所以它们的SOUNDEX值匹配 。这个的作用是能够对录入数据时的错误进行补救。</p></blockquote><h2 id="2-日期和时间处理函数"><a href="#2-日期和时间处理函数" class="headerlink" title="2.日期和时间处理函数"></a>2.日期和时间处理函数</h2><blockquote><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709221414550.png" alt="image-20200709221414550" style="zoom:67%;" /><p>上图列出了一些常用的日期和时间处理函数，使用这些函数，有一些注意点，如下：<br>1.日期必须为格式yyyy-mm-dd  ，因为它排除了多义性（如，04/05/06是2006年5月4日或2006年4月5日或2004年5月6日或……）。</p><p>2.对于日期比较，习惯使用date()函数。  例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id,order_num <span class="keyword">from</span> orders <span class="keyword">where</span> <span class="built_in">date</span>(order_date)=<span class="string">'2005-09-01'</span>;</span><br></pre></td></tr></table></figure><p>比</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id,order_num <span class="keyword">from</span> orders <span class="keyword">where</span> order_date=<span class="string">'2005-09-01'</span>;</span><br></pre></td></tr></table></figure><p>要好。因为order_date的数据类型为datetime。这种类型存储日期及时间值。  比 如 ， 存 储 的 order_date 值 为<br>2005-09-01 11:30:05，则WHERE order_date = ‘2005-09-01’失败。即使给出具有该日期的一行，也不会把它检索出来，因为WHERE匹配失败。  </p><p>同理，也应该在适当的时候使用time（）函数（筛选时间的）。</p></blockquote><h2 id="3-数值处理函数"><a href="#3-数值处理函数" class="headerlink" title="3.数值处理函数"></a>3.数值处理函数</h2><blockquote><p>数值处理函数，就是我们平时学习其他语言都会有的一类函数。</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709225533282.png" alt="image-20200709225533282" style="zoom:67%;" /></blockquote><h1 id="第十二章——汇总数据"><a href="#第十二章——汇总数据" class="headerlink" title="第十二章——汇总数据"></a>第十二章——汇总数据</h1><p>*本章介绍什么是SQL的聚集函数以及如何利用它们汇总表的数据  *</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709231425249.png" alt="image-20200709231425249" style="zoom:80%;" /><p>上图是一些基本的汇总数据的函数</p><p><strong>用法例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(prod_price) <span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710142324387.png" alt="image-20200710142324387" style="zoom:80%;" /><p>其他函数用法类似，不过需要注意count（）函数用法。</p><h2 id="count-函数"><a href="#count-函数" class="headerlink" title="count()函数"></a>count()函数</h2><blockquote><p>1.使用COUNT(*)对表中行的数目进行计数， 不管表列中包含的是空值（NULL）还是非空值。<br>2.使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。  </p><p> <strong>例子(1)</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710143135044.png" alt="image-20200710143135044" style="zoom: 80%;" /><p> <strong>例子(2)</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(cust_email) <span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710143157026.png" alt="image-20200710143157026" style="zoom:80%;" /><p>因为cust_email只有三个数据，另外两个是空的，所以显示3</p></blockquote><h2 id="distinct参数"><a href="#distinct参数" class="headerlink" title="distinct参数"></a>distinct参数</h2><blockquote><p><strong>作用</strong>：只对不同的值进行处理</p><p> <strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">distinct</span> prod_price) <span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><p>只对prod_price中的不同值进行取平均值操作。</p></blockquote><h1 id="第十三章——分组数据"><a href="#第十三章——分组数据" class="headerlink" title="第十三章——分组数据"></a>第十三章——分组数据</h1><p><em>本章将介绍如何分组数据，以便能汇总表内容的子集。这涉及两个新SELECT语句子句，分别是GROUP BY子句和HAVING子句</em></p><h2 id="1-创建分组"><a href="#1-创建分组" class="headerlink" title="1.创建分组"></a>1.创建分组</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> num_prods <span class="keyword">from</span> products <span class="keyword">group</span> <span class="keyword">by</span> vend_id;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710151928575.png" alt="image-20200710151928575" style="zoom: 80%;" /><p><strong>解释</strong>：group by子句把vend_id按照数值进行了分组</p><p><strong>group by使用注意点</strong>：</p><blockquote><p>1.**group by子句必须出现在where子句之后，order by子句之前。  </p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> num_prods <span class="keyword">from</span> products <span class="keyword">where</span> vend_id&lt;=<span class="number">1003</span> <span class="keyword">group</span> <span class="keyword">by</span> vend_id <span class="keyword">order</span> <span class="keyword">by</span> vend_id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="2-过滤分组"><a href="#2-过滤分组" class="headerlink" title="2.过滤分组"></a>2.过滤分组</h2><blockquote><p>使用<strong>having</strong>子句</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> num_prods <span class="keyword">from</span> products <span class="keyword">group</span> <span class="keyword">by</span> vend_id <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710163213402.png" alt="image-20200710163213402" style="zoom: 80%;" /><p><strong>解释</strong>：可以比较上面的例子，<code>having count(*)</code>把大于3的过滤出来，只显示大于3的</p></blockquote><h2 id="3-分组和排序"><a href="#3-分组和排序" class="headerlink" title="3.分组和排序"></a>3.分组和排序</h2><blockquote><p>group by和order by组合使用</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_num,<span class="keyword">sum</span>(quantity*item_price) <span class="keyword">as</span> ordertotal <span class="keyword">from</span> orderitems <span class="keyword">group</span> <span class="keyword">by</span> order_num <span class="keyword">having</span> <span class="keyword">sum</span>(quantity*item_price)&gt;=<span class="number">50</span> <span class="keyword">order</span> <span class="keyword">by</span> ordertotal;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710220755519.png" alt="image-20200710220755519" style="zoom:80%;" /></blockquote><h1 id="第十四章——使用子查询"><a href="#第十四章——使用子查询" class="headerlink" title="第十四章——使用子查询"></a>第十四章——使用子查询</h1><h2 id="1-利用子查询进行过滤"><a href="#1-利用子查询进行过滤" class="headerlink" title="1.利用子查询进行过滤"></a>1.利用子查询进行过滤</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact <span class="keyword">from</span> customers <span class="keyword">where</span> cust_id <span class="keyword">in</span> (<span class="keyword">select</span> cust_id <span class="keyword">from</span> orders <span class="keyword">where</span> order_num <span class="keyword">in</span> (<span class="keyword">select</span> order_num <span class="keyword">from</span> orderitems <span class="keyword">where</span> prod_id=<span class="string">'TNT2'</span>));</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710223330857.png" alt="image-20200710223330857" style="zoom:80%;" /><p><strong>解释</strong>：<strong>(1)</strong> 检索包含物品TNT2的所有订单的编号。<strong>(2)</strong> 检索具有前一步骤列出的订单编号的所有客户的ID。<strong>(3)</strong> 检索前一步骤返回的所有客户ID的客户信息。  </p><p>这个例子，运用十五章学习的联结知识也可以解决，命令如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact <span class="keyword">from</span> customers,orderitems,orders <span class="keyword">where</span> customers.cust_id=orders.cust_id <span class="keyword">and</span> orderitems.order_num=orders.order_num <span class="keyword">and</span> prod_id=<span class="string">'TNT2'</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-子查询作为计算字段"><a href="#2-子查询作为计算字段" class="headerlink" title="2.子查询作为计算字段"></a>2.子查询作为计算字段</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_state,(<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> orders <span class="keyword">where</span> orders.cust_id=customers.cust_id) <span class="keyword">as</span> orders <span class="keyword">from</span> customers <span class="keyword">order</span> <span class="keyword">by</span> cust_name;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200710231213346.png" alt="image-20200710231213346" style="zoom: 80%;" /><p><strong>解释</strong>：<code>select count(*) from orders where orders.cust_id=customers.cust_id</code>  的<strong>作用</strong>是：对于检索出的每个客户，统计其在orders表中的订单数目 。</p></blockquote><h1 id="第十五章——联结表"><a href="#第十五章——联结表" class="headerlink" title="第十五章——联结表"></a>第十五章——联结表</h1><p><em>本章将介绍什么是联结，为什么要使用联结，如何编写使用联结的SELECT语句。</em></p><h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h2><h3 id="1-1关系表"><a href="#1-1关系表" class="headerlink" title="1.1关系表"></a>1.1关系表</h3><blockquote><p>简单来说，就是两个表之间有一列数值是对应的，两个表的行之间是对应的。</p></blockquote><h3 id="1-2联结"><a href="#1-2联结" class="headerlink" title="1.2联结"></a>1.2联结</h3><blockquote><p>简单地说，联结是一种机制，用来在一条SELECT语句中关联表，因此称之为联结。使用特殊的语法，可以联结多个表返<br>回一组输出，联结在运行时关联表中正确的行。  </p></blockquote><h2 id="2-创建联结"><a href="#2-创建联结" class="headerlink" title="2.创建联结"></a>2.创建联结</h2><h3 id="2-1联结两个表"><a href="#2-1联结两个表" class="headerlink" title="2.1联结两个表"></a>2.1联结两个表</h3><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price <span class="keyword">from</span> vendors,products <span class="keyword">where</span> vendors.vend_id=products.vend_id <span class="keyword">order</span> <span class="keyword">by</span> vend_name,prod_name;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200711212343072.png" alt="image-20200711212343072" style="zoom: 80%;" /><p>vend_name是表vendors的数据， prod_name,prod_price是表products的数据。上面的语句把两个表的数据联结起来了</p><p>上面的例子也可以换个语法，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price <span class="keyword">from</span> vendors <span class="keyword">inner</span> <span class="keyword">join</span> products <span class="keyword">on</span> vendors.vend_id=products.vend_id <span class="keyword">order</span> <span class="keyword">by</span> vend_name,prod_name;</span><br></pre></td></tr></table></figure><p>使用的是inner join语法</p></blockquote><h3 id="2-2联结多个表"><a href="#2-2联结多个表" class="headerlink" title="2.2联结多个表"></a>2.2联结多个表</h3><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price,quantity <span class="keyword">from</span> vendors,products,orderitems <span class="keyword">where</span> vendors.vend_id=products.vend_id <span class="keyword">and</span> orderitems.prod_id=products.prod_id <span class="keyword">and</span> order_num=<span class="number">20005</span>;</span><br></pre></td></tr></table></figure></blockquote><h1 id="第十六章——创建高级联结"><a href="#第十六章——创建高级联结" class="headerlink" title="第十六章——创建高级联结"></a>第十六章——创建高级联结</h1><p><em>本章将讲解另外一些联结类型（包括它们的含义和使用方法），介绍如何对被联结的表使用表别名和聚集函数。</em></p><h2 id="1-使用表别名"><a href="#1-使用表别名" class="headerlink" title="1.使用表别名"></a>1.使用表别名</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price,quantity <span class="keyword">from</span> vendors <span class="keyword">as</span> v,products <span class="keyword">as</span> p,orderitems <span class="keyword">as</span> o <span class="keyword">where</span> v.vend_id=p.vend_id <span class="keyword">and</span> o.prod_id=p.prod_id <span class="keyword">and</span> order_num=<span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p>给vendors ,products ,orderitems 三个表起了别名，目的是缩短SQL语句，方便多次使用表</p><p><strong>应该注意</strong>：表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。  </p></blockquote><h2 id="2-使用不同类型的联结"><a href="#2-使用不同类型的联结" class="headerlink" title="2.使用不同类型的联结"></a>2.使用不同类型的联结</h2><h3 id="2-1自联结"><a href="#2-1自联结" class="headerlink" title="2.1自联结"></a>2.1自联结</h3><blockquote><p>问题：假如你发现某物品（其ID为DTNTR）存在问题，因此想知道生产该物品的供应商生产的其他物品是否也存在这些问题。此查询要求首先找到生产ID为DTNTR的物品的供应商，然后找出这个供应商生产的其他物品。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p1.prod_id,p1.prod_name <span class="keyword">from</span> products <span class="keyword">as</span> p1,products <span class="keyword">as</span> p2 <span class="keyword">where</span> p1.vend_id=p2.vend_id <span class="keyword">and</span> p2.prod_id=<span class="string">'DTNTR'</span>;</span><br></pre></td></tr></table></figure><p>使用了自联结的方法，其实也可以使用子查询的方法。但有时候处理联结远比处理子查询快得多。  </p></blockquote><h3 id="2-2自然联结"><a href="#2-2自然联结" class="headerlink" title="2.2自然联结"></a>2.2自然联结</h3><h3 id="2-3外部联结"><a href="#2-3外部联结" class="headerlink" title="2.3外部联结"></a>2.3外部联结</h3><blockquote><p>许多联结将一个表中的行与另一个表中的行相关联。但有时候会需要包含没有关联行的那些行。</p><p><strong>比如</strong>：对每个客户下了多少订单进行计数，包括那些至今尚未下订单的客户；  </p><p>先来看一下两个表</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200711230412881.png" alt="image-20200711230412881" style="zoom:80%;" /><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200711230615742.png" alt="image-20200711230615742" style="zoom:80%;" /><p>表1是orders表，表2是customers表。根据问题，要讲customers表所有的cust_id全部列出来，哪怕他在orders表没数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customers.cust_id,orders.order_num <span class="keyword">from</span> customers <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders <span class="keyword">on</span> customers.cust_id=orders.cust_id;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200711231050332.png" alt="image-20200711231050332" style="zoom:80%;" /><p>输出显示，就算cust_id=10002在orders表里没有数据，一样会输出，只是显示NULL。这主要是<code>left outer join</code>的作用，left指定了将<code>left outer join</code>左边的表的左右行输出，即customers。如果left替换成right，则指orders表。</p></blockquote><h2 id="3-使用带聚集函数的联结"><a href="#3-使用带聚集函数的联结" class="headerlink" title="3.使用带聚集函数的联结"></a>3.使用带聚集函数的联结</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customers.cust_name,customers.cust_id,<span class="keyword">count</span>(orders.order_num) <span class="keyword">as</span> num_ord <span class="keyword">from</span> customers <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders <span class="keyword">on</span> customers.cust_id=orders.cust_id <span class="keyword">group</span> <span class="keyword">by</span> customers.cust_id;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200712001103091.png" alt="image-20200712001103091" style="zoom:80%;" /></blockquote><h1 id="第十七章——组合查询"><a href="#第十七章——组合查询" class="headerlink" title="第十七章——组合查询"></a>第十七章——组合查询</h1><p><em>本章讲述如何利用UNION操作符将多条SELECT语句组合成一个结果集。</em>  </p><blockquote><p>使用<strong>union</strong></p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,prod_id,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> prod_price <span class="keyword">union</span> <span class="keyword">select</span> vend_id,prod_id,prod_price <span class="keyword">from</span> products <span class="keyword">where</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure><p>UNION指示MySQL执行两条SELECT语句，并把输出组合成单个查询结果集。  </p><p><strong>union一些特性：</strong></p><blockquote><p>1.每个查询必须包含相同的列、表达式或聚集函数（不过分析各个列不需要以相同的次序列出）。  </p><p>2.UNION从查询结果集中自动去除了重复的行。若想保留重复行，可用UNION ALL  。</p><p>3.在用UNION组合查询时，只能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后。  </p></blockquote></blockquote><h1 id="第十八章——全文本搜索"><a href="#第十八章——全文本搜索" class="headerlink" title="第十八章——全文本搜索"></a>第十八章——全文本搜索</h1><p><em>本章将学习如何使用MySQL的全文本搜索功能进行高级的数据查询和选择</em>  </p><h2 id="1-全文本搜索是什么？"><a href="#1-全文本搜索是什么？" class="headerlink" title="1.全文本搜索是什么？"></a>1.全文本搜索是什么？</h2><blockquote><p>是可以进行精确、多功能，高性能的文本搜索方式</p></blockquote><h2 id="2-使用方法-步骤-："><a href="#2-使用方法-步骤-：" class="headerlink" title="2.使用方法(步骤)："></a>2.使用方法(步骤)：</h2><blockquote><p><strong>（1）.创建表的时候要使用fulltext命令来对指定索引的列。</strong></p><p><strong>例子</strong>：（这个表在导入的时候已经存在了，这里只是演示怎么创建的，create table命令后面怎么用后面章节会讲，先理解fulltext作用）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> productnotes</span><br><span class="line">(</span><br><span class="line">    note_id  <span class="built_in">int</span>  <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    prod_id  <span class="built_in">char</span>(<span class="number">10</span>)  <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    note_date  datetime  <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    note_text  <span class="built_in">text</span>  <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(note_id),</span><br><span class="line">    fulltext(note_text)</span><br><span class="line">)<span class="keyword">engine</span>=myisam;</span><br></pre></td></tr></table></figure><p>这个例子fulltext(note_text)指定了全文本搜索时对note_text列进行搜索。</p><p><strong>（2）.进行全文本搜索</strong>  </p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text <span class="keyword">from</span> productnotes <span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'rabbit'</span>);</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200714130019348.png" alt="image-20200714130019348" style="zoom:80%;" /><p>productnotes表中的note_text列有两行含有rabbit，因此被检索出来了。其中，Match(note_text)指示MySQL针对指定的<br>列进行搜索， Against(‘rabbit’)指定词rabbit作为搜索文本。  </p></blockquote><h2 id="3-全文本搜索优点"><a href="#3-全文本搜索优点" class="headerlink" title="3.全文本搜索优点"></a>3.全文本搜索优点</h2><blockquote><p><strong>（1）</strong>相对于like+通配符,正则表达式这些来说，性能高</p><p><strong>（2）</strong>全文本搜索会根据被搜索文本出现的先后，次数等进行排序</p></blockquote><h2 id="4-使用查询扩展"><a href="#4-使用查询扩展" class="headerlink" title="4.使用查询扩展"></a>4.使用查询扩展</h2><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text <span class="keyword">from</span> productnotes <span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'anvils'</span> <span class="keyword">with</span> <span class="keyword">query</span> expansion);</span><br></pre></td></tr></table></figure><p><code>with query expansion</code>使得搜索结果不仅输出anvils所在行，还会输出带有<code>anvils所在行</code>其他单词的行，就是<code>anvils所在行</code>的其他单词，要是在其他行出现，会被认为相关，然后一起输出</p></blockquote><h2 id="5-布尔文本搜索"><a href="#5-布尔文本搜索" class="headerlink" title="5.布尔文本搜索"></a>5.布尔文本搜索</h2><blockquote><p>即使没有FULLTEXT索引也可以使用布尔文本搜索   </p><p>以布尔方式，可以提供关于如下内容的细节：</p><blockquote><p> 要匹配的词；<br> 要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；<br> 排列提示（指定某些词比其他词更重要，更重要的词等级更高）；<br> 表达式分组；<br> 另外一些内容  </p></blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text <span class="keyword">from</span> productnotes <span class="keyword">where</span> <span class="keyword">match</span>(note_text) against (<span class="string">'heavy -ropes*'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>);</span><br></pre></td></tr></table></figure><p>添加<code>in boolean mode</code>代表进行布尔文本搜索，<code>-rope*</code>代表排除包含rope*（任何以rope开始的词，包括ropes）的行  。</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200714140336335.png" alt="image-20200714140336335" style="zoom: 67%;" /><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200714140525598.png" alt="image-20200714140525598" style="zoom:80%;" /></blockquote><h2 id="6-全文本搜索的使用说明"><a href="#6-全文本搜索的使用说明" class="headerlink" title="6.全文本搜索的使用说明"></a>6.全文本搜索的使用说明</h2><blockquote><p><strong>(1)</strong>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。<br><strong>(2)</strong> MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参阅MySQL文档以了解如何完成此工作）。<br><strong>(3)</strong>许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此， MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。 50%规则不用于IN BOOLEAN MODE。<br><strong>(4)</strong>如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词或者不出现，或者至少出现在50%的行中）。<br><strong>(5)</strong> 忽略词中的单引号。例如， don’t索引为dont。<br><strong>(6)</strong>不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。<br><strong>(7)</strong>如前所述，仅在MyISAM数据库引擎中支持全文本搜索。  </p></blockquote><h1 id="第十九章——插-入-数-据"><a href="#第十九章——插-入-数-据" class="headerlink" title="第十九章——插 入 数 据"></a>第十九章——插 入 数 据</h1><p><em>本章介绍如何利用SQL的INSERT语句将数据插入表中。</em>  </p><h2 id="1-插入行"><a href="#1-插入行" class="headerlink" title="1.插入行"></a>1.插入行</h2><blockquote><p>使用<code>insert into</code></p><p><strong>例子</strong>：给表customers添加了两行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,cust_address,cust_city,cust_state,cust_zip,cust_country)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'tian'</span>,<span class="string">'dong shan street'</span>,<span class="string">'huazhou'</span>,<span class="string">'MI'</span>,<span class="string">'66666'</span>,<span class="string">'CH'</span>),</span><br><span class="line">      (<span class="string">'bin'</span>,<span class="string">'dong shan street'</span>,<span class="string">'huazhou'</span>,<span class="string">'MI'</span>,<span class="string">'66066'</span>,<span class="string">'CH'</span>);</span><br></pre></td></tr></table></figure><p><code>insert into</code>后面跟着表名，需要添加数据的列用括号括着。<code>values</code>指出需要添加的数据，需要按照前面的列名顺序添加。</p></blockquote><h2 id="2-插入检索出的数据"><a href="#2-插入检索出的数据" class="headerlink" title="2.插入检索出的数据"></a>2.插入检索出的数据</h2><blockquote><p><strong>例子</strong>：将表custnew的行插入到表customers中</p><p>假设A,B,C,D,E,F,G 是表custnew的列名。这个例子是把A列插入到cust_name，B列插入到cust_address，以此类推</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,cust_address,cust_city,cust_state,cust_zip,cust_country)</span><br><span class="line"><span class="keyword">select</span> A,B,C,D,E,F,G <span class="keyword">from</span> custnew;</span><br></pre></td></tr></table></figure></blockquote><h1 id="第二十章——更新和删除数据"><a href="#第二十章——更新和删除数据" class="headerlink" title="第二十章——更新和删除数据"></a>第二十章——更新和删除数据</h1><p><em>本章介绍如何利用UPDATE和DELETE语句进一步操纵表数据。</em>  </p><h2 id="1-更新数据"><a href="#1-更新数据" class="headerlink" title="1.更新数据"></a>1.更新数据</h2><blockquote><p>使用update语句</p><p><strong>例子1</strong>：给表customers里的一位客户添加邮箱地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> customers <span class="keyword">set</span> cust_email=<span class="string">'elmer@fudd.com'</span> <span class="keyword">where</span> cust_id=<span class="number">10005</span>;</span><br></pre></td></tr></table></figure><p><strong>例子1</strong>：更新表customers里的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> customers <span class="keyword">set</span> cust_name=<span class="string">'The Fudds'</span>,cust_email=<span class="string">'elmer@fudd.com'</span> <span class="keyword">where</span> cust_id=<span class="number">10005</span>;</span><br></pre></td></tr></table></figure><p>记得不要漏了where语句，不然就会把全部行的数据都更新了。如果想删除某个列数值，可设置它为NULL  。</p><p><strong>ignore关键字</strong>： 如果用UPDATE语句更新多行，并且在更新这些行中的一行或多行时出一个现错误，则整个UPDATE操作被取消（错误发生前更新的所有行被恢复到它们原来的值）。为即使是发生错误，也继续进行更新，可使用IGNORE关键字，如下所示：UPDATE IGNORE customers…  </p></blockquote><h2 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title="2.删除数据"></a>2.删除数据</h2><blockquote><p><strong>（1）删除整个行</strong>，使用delete语句</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> customers <span class="keyword">where</span> cust_id=<span class="number">10005</span>;</span><br></pre></td></tr></table></figure><p>（2）删除所有行，使用truncate table语句</p><p><strong>例子1</strong>：更新表customers里的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> customers;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3.注意点"></a>3.注意点</h2><blockquote><p>（1）小心使用 MySQL没有撤销（ undo）按钮。应该非常小心地使用UPDATE和DELETE，否则你会发现自己更新或删除了错误的数据。  </p><p>（2）在对UPDATE或DELETE语句使用WHERE子句前，应该先用SELECT进行测试，保证它过滤的是正确的记录，以防编写的WHERE子句不正确  。</p></blockquote><h1 id="第二十一章——创建和操纵表"><a href="#第二十一章——创建和操纵表" class="headerlink" title="第二十一章——创建和操纵表"></a>第二十一章——创建和操纵表</h1><p><em>本章讲授表的创建、更改和删除的基本知识。</em>  </p><h2 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h2><blockquote><p>使用create table</p><blockquote><p><strong>(1)</strong>表的<strong>主键</strong>可以在创建表时用<strong>PRIMARY KEY</strong>关键字指定。主键是用来标识表中每个行的列。  </p><p><strong>(2)</strong>每个表列或者是NULL列，或者是NOT NULL列，需要规定好。NULL为默认设置，如果不指定NOT NULL，则认为指定的是NULL。NULL代表该列可以是空的，NOT NULL代表该列一定要有值。</p><p><strong>(3)</strong> <strong>AUTO_INCREMENT</strong> :添加了AUTO_INCREMENT的列每当增加一行时自动增量  。</p><p><strong>(4)</strong> 指定默认值  :使用<strong>DEFAULT</strong> ，与AUTO_INCREMENT添加位置一样，比如添加default 1,那么这一列在没给出数值的时候就是默认值1。</p><p><strong>(5)</strong> <strong>引擎类型</strong> :可以看到下面例子的最后有个语句：ENGINE=InnoDB  ，这语句是用来配置引擎的，InnoDB是一个可靠的事务处理引擎  。除此之外还有MEMORY、MyISAM  </p></blockquote><p><strong>例子</strong>：表customers的创建</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200716164435258.png" alt="image-20200716164435258" style="zoom: 67%;" /></blockquote><h2 id="2-操纵表"><a href="#2-操纵表" class="headerlink" title="2.操纵表"></a>2.操纵表</h2><h3 id="2-1-更新表"><a href="#2-1-更新表" class="headerlink" title="2.1 更新表"></a>2.1 更新表</h3><blockquote><p>使用ALTER TABLE语句  </p><p><strong>例子1</strong>：给表添加一个列  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> vendors <span class="keyword">add</span> vend_phone <span class="built_in">char</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><strong>例子2</strong>：给表删除一个列  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> vendors <span class="keyword">drop</span> <span class="keyword">column</span> vend_phone;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-2-删除表"><a href="#2-2-删除表" class="headerlink" title="2.2 删除表"></a>2.2 删除表</h3><blockquote><p>删除表（删除整个表而不是其内容） ,使用DROP TABLE语句，  与上一章的delete不一样，</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> vendors2;</span><br></pre></td></tr></table></figure><p>请谨慎使用！</p></blockquote><h3 id="2-3-重命名表"><a href="#2-3-重命名表" class="headerlink" title="2.3 重命名表"></a>2.3 重命名表</h3><blockquote><p>使用RENAME TABLE语句可以重命名一个表</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> vendors <span class="keyword">to</span> vendor,vendor <span class="keyword">to</span> vendors;</span><br></pre></td></tr></table></figure></blockquote><h1 id="第二十二章——使-用-视-图"><a href="#第二十二章——使-用-视-图" class="headerlink" title="第二十二章——使 用 视 图"></a>第二十二章——使 用 视 图</h1><p><em>本章将介绍视图究竟是什么，它们怎样工作，何时使用它们。我们还将看到如何利用视图简化前面章节中执行的某些SQL操作。</em>  </p><h2 id="1-什么是视图"><a href="#1-什么是视图" class="headerlink" title="1. 什么是视图"></a>1. 什么是视图</h2><blockquote><p>简单来说，就是可以通过视图，呈现多个表数据的组合，在对视图进行检索、查看的时候，其实是通过一定的方式查看视图引用的表的数据，视图并没有像表这样实际数据。我们前面有学习了联结，联结的语句一般会比较复杂，利用视图就可以简化复杂语句的使用了。</p><p>再简而言之，视图就是对筛选的数据进行封装，但是它并没有真正的复制表的数据，只是引用。</p></blockquote><h2 id="2-使用视图注意点"><a href="#2-使用视图注意点" class="headerlink" title="2.使用视图注意点"></a>2.使用视图注意点</h2><blockquote><p><strong>（1）</strong>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。<br><strong>（2）</strong>ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也含有ORDER BY，那么该视图中的ORDER BY将被覆盖。<br><strong>（3）</strong>视图不能索引，也不能有关联的触发器或默认值。<br><strong>（4）</strong>视图可以和表一起使用。例如，编写一条联结表和视图的SELECT语句。  </p></blockquote><h2 id="3-使用视图"><a href="#3-使用视图" class="headerlink" title="3.使用视图"></a>3.使用视图</h2><p><strong>创建视图</strong>：CREATE VIEW语句<br><strong>查看创建某视图的语句</strong>： 使用SHOW CREATE VIEW viewname（viewname是实际视图名字）<br><strong>删除视图：</strong>其语法为DROP VIEW viewname。<br><strong>更新视图时</strong>：可以先用DROP再用CREATE，也可以直接用CREATE ORREPLACE VIEW。</p><h3 id="3-1-利用视图简化复杂的联结"><a href="#3-1-利用视图简化复杂的联结" class="headerlink" title="3.1 利用视图简化复杂的联结"></a>3.1 利用视图简化复杂的联结</h3><blockquote><p><strong>例子</strong>：创建一个视图，呈现内容与<code>select customers.cust_id,orders.order_num from customers left outer join orders on customers.cust_id=orders.cust_id;</code>一致。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> customers_num <span class="keyword">as</span> <span class="keyword">select</span> customers.cust_id,orders.order_num <span class="keyword">from</span> customers <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders <span class="keyword">on</span> customers.cust_id=orders.cust_id;</span><br></pre></td></tr></table></figure><p>创建之后，可通过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers_num;</span><br></pre></td></tr></table></figure><p>查看与上述联结语句一样的内容</p></blockquote><h3 id="3-2用视图过滤不想要的数据"><a href="#3-2用视图过滤不想要的数据" class="headerlink" title="3.2用视图过滤不想要的数据"></a>3.2用视图过滤不想要的数据</h3><blockquote><p>其实与利用视图简化联结一样用法</p><p><strong>例子</strong>：过滤没有邮箱的客户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> customers_not_email <span class="keyword">as</span> <span class="keyword">select</span> cust_id,cust_name,cust_email <span class="keyword">from</span> customers <span class="keyword">where</span> cust_email <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></blockquote><p>其他的视图创建都差不多，后面跟着select语句。</p><h1 id="第二十三章——使用存储过程"><a href="#第二十三章——使用存储过程" class="headerlink" title="第二十三章——使用存储过程"></a>第二十三章——使用存储过程</h1><p><em>本章介绍什么是存储过程，为什么要使用存储过程以及如何使用存储过程，并且介绍创建和使用存储过程的基本语法</em>。  </p><h2 id="1-什么是存储过程"><a href="#1-什么是存储过程" class="headerlink" title="1.什么是存储过程"></a>1.什么是存储过程</h2><blockquote><p>简单来说，存储过程的各语言里的子函数很像，把一些语句封装成块，使用的时候直接调用即可。</p></blockquote><h2 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2.创建存储过程"></a>2.创建存储过程</h2><blockquote><p>使用<code>create procedure</code>语句</p><p><code>DELIMITER //</code>告诉命令行实用程序使用//作为新的语句结束分隔符 ，如果用<code>；</code>会报错</p><blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(<span class="keyword">IN</span> onumber <span class="built_in">INT</span>, <span class="keyword">OUT</span> ototal <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(item_price*quantity) <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num=onumber <span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span>//</span><br></pre></td></tr></table></figure><p>创建完成后，下面是把分隔符换回<code>;</code>，调用存储过程，以及使用的截图</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200717151934659.png" alt="image-20200717151934659" style="zoom: 80%;" /></blockquote></blockquote><h2 id="3-建立智能存储过程"><a href="#3-建立智能存储过程" class="headerlink" title="3.建立智能存储过程"></a>3.建立智能存储过程</h2><blockquote><p><strong>例子</strong>：对某些顾客增加增值税  </p><p><code>--</code>后面的是注释，<code>taxable</code>它是一个布尔值（如果要增加税则为真，否则为假）,<code>DECLARE</code>语句定义了两个局部变量。  <code>COMMENT</code>它不是必需的，但如果给出，将在SHOW PROCEDURE STATUS的结果中显示。  </p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200717160912339.png" alt="image-20200717160912339" style="zoom: 67%;" /><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200717161009835.png" alt="image-20200717161009835" style="zoom: 80%;" /><p><strong>输入输出</strong>：</p><p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200717161248152.png" alt="image-20200717161248152"></p></blockquote><h2 id="4-检查存储过程"><a href="#4-检查存储过程" class="headerlink" title="4.检查存储过程"></a>4.检查存储过程</h2><blockquote><p>为显示用来创建一个存储过程的CREATE语句，使用SHOW CREATEPROCEDURE语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal;</span><br></pre></td></tr></table></figure></blockquote><h1 id="第二十四章——使-用-游-标"><a href="#第二十四章——使-用-游-标" class="headerlink" title="第二十四章——使 用 游 标"></a>第二十四章——使 用 游 标</h1><p><em>本章将讲授什么是游标以及如何使用游标。</em></p><h2 id="1-什么是游标"><a href="#1-什么是游标" class="headerlink" title="1.什么是游标"></a>1.什么是游标</h2><blockquote><p>如果学过c语言，就比较好理解。游标的作用与指针类似。比如在一个操作里，需要对一个表的一千行进行有规律的操作，比如+1、+2、+3……，那么使用一千条语句就不现实了。此时就可以通过游标和循环，每次对一行操作，循环一千次。</p></blockquote><h2 id="2-使用游标"><a href="#2-使用游标" class="headerlink" title="2.使用游标"></a>2.使用游标</h2><blockquote><p><strong>创建游标</strong>: 用<code>DECLARE ....CURSOR</code>语句创建 。</p><p><strong>打开和关闭游标</strong>：用<code>OPEN</code>语句来打开  ，用<code>CLOSE</code>语句来打开,如果你不明确关闭游标， MySQL将会在到达END语句时自动关闭它。  </p><p><strong>使用游标数据</strong>  :游标被打开后，可以使用FETCH语句分别访问它的每一行。FETCH指定检索什么数据（所需的列），检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条FETCH语句检索下一行（不重复读取同一行）。  </p></blockquote><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">--声明局部变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> done <span class="built_in">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> o <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> t <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--声明游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="comment">--定义了一个CONTINUE HANDLER，它是在条件出现时被执行的代码。这里它指出当SQLSTATE'02000'出现时，SET done=1。</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">'02000'</span> <span class="keyword">SET</span> done=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建一个表存数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ordertotals</span><br><span class="line"></span><br><span class="line"><span class="comment">--打开游标</span></span><br><span class="line"><span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line"><span class="comment">--重复使用FETCH</span></span><br><span class="line">REPEAT FETCH ordernumbers INTO o;</span><br><span class="line"></span><br><span class="line"><span class="comment">--掉用前面增加增值税的存储过程，并且返回结果</span></span><br><span class="line"><span class="keyword">CALL</span> ordertotal(o,<span class="number">1</span>,t);</span><br><span class="line"></span><br><span class="line"><span class="comment">--保存数据，十九章内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ordertotals(order_num,total) <span class="keyword">VALUES</span>(o,t);</span><br><span class="line"></span><br><span class="line"><span class="comment">--结束循环</span></span><br><span class="line">UNTIL done <span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--关闭游标</span></span><br><span class="line">CLOSE ordernumbers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>//</span><br></pre></td></tr></table></figure><h1 id="第二十五章——使用触发器"><a href="#第二十五章——使用触发器" class="headerlink" title="第二十五章——使用触发器"></a>第二十五章——使用触发器</h1><p><em>本章学习什么是触发器，为什么要使用触发器以及如何使用触发器。本章还介绍创建和使用触发器的语法。</em>  </p><p>如果你想要某条语句（或某些语句）在事件发生时自动执行，怎么办呢？ 答案：使用<strong>触发器</strong> </p><p><strong>要点</strong>：</p><blockquote><p><strong>（1）</strong>触发器只能触发的语句：<strong>DELETE、 INSERT、UPDATE</strong>。  </p><p><strong>（2）</strong>只有表才支持触发器，视图不支持（临时表也不支持）。  </p><p><strong>（3）</strong> 触发器自带一些虚拟表，比如NEW,OLD。</p></blockquote><h2 id="1-创建触发器"><a href="#1-创建触发器" class="headerlink" title="1.创建触发器"></a>1.创建触发器</h2><blockquote><blockquote><p><strong>创建触发器要求：</strong><br> 唯一的触发器名；<br> 触发器关联的表；<br> 触发器应该响应的活动（DELETE、 INSERT或UPDATE）；<br> 触发器何时执行（处理之前或之后）。  </p></blockquote><p>用<code>CREATE TRIGGER</code>语句创建  </p><p><strong>例子</strong>：这个例子暂时有问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--文本Productadded将对每个插入的行显示一次。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> products <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> <span class="string">'product added'</span> <span class="keyword">INTO</span> @tip;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO products(prod_id,vend_id,prod_name,prod_price,prod_desc)</span><br><span class="line">VALUES(&#39;tian&#39;,1003,&#39;yutian&#39;,10,&#39;sss&#39;);</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-删除触发器"><a href="#2-删除触发器" class="headerlink" title="2.删除触发器"></a>2.删除触发器</h2><blockquote><p>和前面的删除语句一样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> newproduct;</span><br></pre></td></tr></table></figure></blockquote><h1 id="第二十六章——管理事务处理"><a href="#第二十六章——管理事务处理" class="headerlink" title="第二十六章——管理事务处理"></a>第二十六章——管理事务处理</h1><p><em>本章介绍什么是事务处理以及如何利用COMMIT和ROLLBACK语句来管理事务处理</em>  </p><h2 id="1-什么是事务处理"><a href="#1-什么是事务处理" class="headerlink" title="1.什么是事务处理"></a>1.什么是事务处理</h2><blockquote><p><strong>事务处理</strong>是一种机制，用来管理必须成批执行的MySQL操作，以保证数据库不包含不完整的操作结果。<strong>通俗点</strong>来说就是用来避免因为一些故障导致sql语句执行到一半就停止了，然后产生了错误的数据。</p><p>事务处理以<code>START TRANSACTION;</code>开始，有点类似一个函数块，然后可以利用一些语句对整个事务处理进行控制。</p></blockquote><h2 id="2-使用ROLLBACK"><a href="#2-使用ROLLBACK" class="headerlink" title="2.使用ROLLBACK"></a>2.使用ROLLBACK</h2><blockquote><p>ROLLBACK命令用来回退（撤销） MySQL语句</p><p><strong>注意：</strong></p><blockquote><p><strong>(1)</strong>ROLLBACK只能在一个事务处理内使用（在执行一条STARTTRANSACTION命令之后）。  </p><p><strong>(2)</strong>不能回退SELECT语句。（这样做也没有什么意义。）不能回退CREATE或DROP操作。  </p></blockquote><p><strong>例子</strong> :撤销删除操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders;</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-使用COMMIT"><a href="#2-使用COMMIT" class="headerlink" title="2.使用COMMIT"></a>2.使用COMMIT</h2><blockquote><p>为进行明确的提交，使用COMMIT语句。也就是COMMIT用来保证语句执行完毕无误后再提交结果</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>最后的COMMIT语句仅在不出错时写出更改。如果第一条DELETE起作用，但第二条失败，则DELETE不会提交（实际上，它是被自动撤销的）。  </p></blockquote><h2 id="3-使用保留点"><a href="#3-使用保留点" class="headerlink" title="3.使用保留点"></a>3.使用保留点</h2><blockquote><p>ROLLBACK和COMMIT语句可以写入或撤销整个事务处理。但是复杂的事务处理可能需要部分提交或回退。便可以使用保留点</p><p>使用SAVEPOINT语句 创建保留点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> goback;</span><br></pre></td></tr></table></figure><p> goback就是保留点名称，如果需要返回保留点，就用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> goback;</span><br></pre></td></tr></table></figure><p>释放保留点就用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RELEASE SAVEPOINT goback;</span><br></pre></td></tr></table></figure></blockquote><h2 id="4-更改默认的提交行为"><a href="#4-更改默认的提交行为" class="headerlink" title="4.更改默认的提交行为"></a>4.更改默认的提交行为</h2><blockquote><p>在事务处理里，每一个语句都是立刻执行并提交的，如果想指示MySQL不自动提交更改  ，可以用以下语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>设置autocommit为0（假）指示MySQL不自动提交更改（直到autocommit被设置为真为止）。  </p></blockquote><h1 id="第二十七章——全球化和本地化"><a href="#第二十七章——全球化和本地化" class="headerlink" title="第二十七章——全球化和本地化"></a>第二十七章——全球化和本地化</h1><p><em>本章介绍MySQL处理不同字符集和语言的基础知识。</em>  </p><h2 id="1-字符集和校对顺序"><a href="#1-字符集和校对顺序" class="headerlink" title="1.字符集和校对顺序"></a>1.字符集和校对顺序</h2><blockquote><p><strong>(1)显示所有可用的字符集以及每个字符集的描述和默认校对:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>;</span><br></pre></td></tr></table></figure><p><strong>(2)显示所有可用的校对，以及它们适用的字符集</strong>  :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;</span><br></pre></td></tr></table></figure><p><strong>(3)给表指定字符集和校对</strong>  </p><p>此语句创建一个包含两列的表，并且指定一个字符集和一个校对顺序。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">columnn1 <span class="built_in">INT</span>,</span><br><span class="line">COLUMNN2 <span class="built_in">VARCHAR</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line"><span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure><p><strong>(4)对每个列指定字符集个校对</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">columnn1 <span class="built_in">INT</span>,</span><br><span class="line">COLUMNN2 <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">column3 <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_general_ci)</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line"><span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure></blockquote><h1 id="第二十八章——安-全-管-理"><a href="#第二十八章——安-全-管-理" class="headerlink" title="第二十八章——安 全 管 理"></a>第二十八章——安 全 管 理</h1><p><em>数据库服务器通常包含关键的数据，确保这些数据的安全和完整需要利用访问控制。本章将学习MySQL的访问控制和用户管理。</em>  </p><h2 id="1-创建，重命名，删除用户"><a href="#1-创建，重命名，删除用户" class="headerlink" title="1.创建，重命名，删除用户"></a>1.创建，重命名，删除用户</h2><blockquote><p><strong>（1）创建用户</strong></p><p>使用CREATE USER语句  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> tian1 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'111111'</span>;</span><br></pre></td></tr></table></figure><p><code>tian1</code>是用户名，<code>111111</code>是密码。不过创建新用户不一定需要设置密码。</p><p><strong>（2）重命名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> tian1 <span class="keyword">TO</span> tiantian;</span><br></pre></td></tr></table></figure><p><strong>（3）删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> tiantian;</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-设置访问权限"><a href="#2-设置访问权限" class="headerlink" title="2.设置访问权限"></a>2.设置访问权限</h2><p>在创建用户账号后，必须接着分配访问权限。新创建的用户账号没有访问权限。它们能登录MySQL，但不能看到数据，不能执行任何数据库操作。  </p><blockquote><p><strong>(1)查看权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> tian1;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200719135438219.png" alt="image-20200719135438219" style="zoom: 80%;" /><p><code>USAGE ON *.*</code>：<code>USAGE</code>表示没有权限，<code>*.*</code>表示任意数据库以及任意表。所以，此结果表示在任意数据库和任意表上对任何东西没有权限。  </p><p><strong>（2）添加权限</strong></p><p>使用GRANT语句  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT,INSERT ON crashcourses.* TO tian1;</span><br></pre></td></tr></table></figure><p>此GRANT允许用户在crashcourse.*（crashcourse数据库的所有表）上使用SELECT。  </p><p><strong>（3）删除权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.* <span class="keyword">FROM</span> tian1;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-更改密码"><a href="#3-更改密码" class="headerlink" title="3.更改密码"></a>3.更改密码</h2><blockquote><p>使用SET PASSWORD语句  </p><p><strong>例子1：</strong>更改tian1的密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> tian1=<span class="keyword">Password</span>(<span class="string">'222222'</span>);</span><br></pre></td></tr></table></figure><p><strong>例子1：</strong>更改当前登录用户的密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> =<span class="keyword">Password</span>(<span class="string">'222222'</span>);</span><br></pre></td></tr></table></figure></blockquote><h1 id="第二十九章——数据库维护"><a href="#第二十九章——数据库维护" class="headerlink" title="第二十九章——数据库维护"></a>第二十九章——数据库维护</h1><p><em>本章学习如何进行常见的数据库维护。</em>  </p><blockquote><p><strong>(1)</strong>ANALYZE TABLE，用来检查表键是否正确。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> orders;</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200719150555529.png" alt="image-20200719150555529" style="zoom:80%;" /><p>(2)</p></blockquote><h1 id="第三十章——改善性能"><a href="#第三十章——改善性能" class="headerlink" title="第三十章——改善性能"></a>第三十章——改善性能</h1><p><em>本章将复习与MySQL性能有关的某些要点。</em></p><blockquote><p>（1）MySQL是用一系列的默认设置预先配置的，从这些设置开始通常是没问题的。但过一段时间后你可能需要调整内存分配、缓冲区大小等。（为查看当前设置，可使用 SHOW VARIABLES;和 SHOW STATUS;。）<br>（2）MySQL一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执行缓慢。如果你遇到显著的性能不良，可使用SHOW PROCESSLIST显示所有活动进程（以及它们的线程ID和执行时间）。你还可以用KILL命令终结某个特定的进程（使用这个命令需要作为管理员登录）。<br>（3）总是有不止一种方法编写同一条SELECT语句。 应该试验联结、并、子查询等，找出最佳的方法。<br>（4）使用EXPLAIN语句让MySQL解释它将如何执行一条SELECT语句。<br>（5）一般来说，存储过程执行得比一条一条地执行其中的各条MySQL语句快。<br>（6）应该总是使用正确的数据类型。<br>（7）决不要检索比需求还要多的数据。换言之，不要用SELECT *（除非你真正需要每个列）。<br>（8） 有的操作（包括INSERT）支持一个可选的DELAYED关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。<br>（9）在导入数据时，应该关闭自动提交。你可能还想删除索引（包括FULLTEXT索引），然后在导入完成后再重建它们。<br>（10）必须索引数据库表以改善数据检索的性能。<br>（11）你的SELECT语句中有一系列复杂的OR条件吗？通过使用多条SELECT语句和连接它们的UNION语句，你能看到极大的性能改<br>进。<br>（12）索引改善数据检索的性能，但损害数据插入、删除和更新的性能。如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。（索引可根据需要添加和删除。）<br>（13）LIKE很慢。一般来说，最好是使用FULLTEXT而不是LIKE。<br>（14）数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown小技巧</title>
      <link href="/2020/07/20/markdown%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/07/20/markdown%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>markdown的基础语法以及一些稍微高级的用法</p><a id="more"></a><p><strong>markdown</strong>是什么？</p><p>百度百科：Markdown是一种可以使用普通文本编辑器编写的<a href="https://baike.baidu.com/item/标记语言/5964436" target="_blank" rel="noopener">标记语言</a>，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>换种说法，就是文章内容会根据你标记的符号来呈现特定的格式，markdown文件后缀是md。</p><p>在这里，给大家介绍一款我在用的markdown编辑器——Typera（特殊的编辑器会根据<strong>markdown</strong>语法实时渲染，呈现格式。）效果可以看视频。</p><h1 id="基础语法看这里"><a href="#基础语法看这里" class="headerlink" title="基础语法看这里"></a>基础语法看这里</h1><blockquote><p>1.<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">链接1</a></p><p>2.<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">连接2</a></p></blockquote><h1 id="基础语法没怎么提及的用法"><a href="#基础语法没怎么提及的用法" class="headerlink" title="基础语法没怎么提及的用法"></a>基础语法没怎么提及的用法</h1><ul><li><strong>控制主页显示内容</strong><blockquote><p><code>&lt;!--more--&gt;</code><br>只显示 <code>&lt;!--more--&gt;</code> 之前的内容、</p></blockquote></li></ul><ul><li><strong>插入图片</strong><blockquote><p>目前我使用的是阿里云+Typora的方法，方法见知乎：<br><a href="https://zhuanlan.zhihu.com/p/138878534" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/138878534</a><br>目前我是用4.98元买了6个月的资源包，后续费用怎样我再写上来</p></blockquote></li></ul><ul><li><strong>调节图片大小</strong></li></ul><blockquote><p><strong>方法1</strong>：格式：<code>&lt;img src=&quot;图片路径或网址&quot; width=&quot;这里写宽度px&quot;&gt;</code></p><p>比如下面这张图片的代码是<code>&lt;img src=&quot;http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706141931838.png&quot; width=&quot;100px&quot;&gt;</code></p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706141931838.png" width="100px"><p><strong>方法2：</strong></p><p>格式：<code>&lt;img src=&quot;图片路径或网址&quot; alt=&quot;图片描述（图片没显示时显示的文字）&quot; style=&quot;zoom: 一个百分数（控制大小）;&quot; /&gt;</code></p><p>图片描述也可以不要：<code>&lt;img src=&quot;图片路径或网址&quot; style=&quot;zoom: 一个百分数（控制大小）;&quot; /&gt;</code></p><p>比如下面这张图片的代码是<code>&lt;img src=&quot;http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706141931838.png&quot; style=&quot;zoom: 67%;&quot; /&gt;</code></p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200706141931838.png" style="zoom: 67%;" /><p><strong>方法3：</strong>根据上面插入图片的方法配置好，可以直接把图片复制粘贴到Typora，会自动上传阿里云并且编辑好方法2的格式，十分方便。</p></blockquote><ul><li><p><strong>添加目录</strong></p><blockquote><p>利用vscode的“Markdown TOC”插件可以自动生成目录</p></blockquote></li><li><p><strong>文字居中</strong></p></li></ul><blockquote><div align="center" >比如这样</div><p>格式：<code>&lt;div align=&quot;center&quot; &gt;比如这样&lt;/div&gt;</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建与运营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础知识点</title>
      <link href="/2020/07/20/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/07/20/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>这里，有我学习linux的一些笔记^_^</p><a id="more"></a><p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><strong>为什么学习 Linux 系统？</strong>  </li></ul><p>可以看一下下图linux相对于windows的优势</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709110136166.png" alt="image-20200709110136166" style="zoom:80%;" /><p>Linux的这些优势就是需要学习Linux的部分原因</p><h1 id="一、linux基础命令"><a href="#一、linux基础命令" class="headerlink" title="一、linux基础命令"></a>一、linux基础命令</h1><h3 id="1-命令格式"><a href="#1-命令格式" class="headerlink" title="1.命令格式"></a>1.命令格式</h3><p><code>命令名称 [命令参数] [命令对象]</code></p><p>命令名称、命令参数、命令对象之间请用空格键分隔。<br>命令对象一般是指要处理的文件、目录、用户等资源，而命令参数可以用长格式（完整的选项名称,例如：<code>man --help</code>）， 也可以用短格式（单个字母的缩写，例如：<code>man -h</code>）， 两者分别用<code>--</code>与<code>-</code>作为前缀  .</p><h3 id="2-常用系统工作命令"><a href="#2-常用系统工作命令" class="headerlink" title="2.常用系统工作命令"></a>2.常用系统工作命令</h3><ul><li><strong>man命令</strong></li></ul><p>man可以用来查看命令的帮助信息，比如我想了解<code>date</code>命令的帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man date</span><br></pre></td></tr></table></figure><ul><li><strong>echo命令</strong></li></ul><p><strong>格式</strong>:“echo [字符串 | $变量]”，echo 命令用于在终端输出字符串或变量提取后的值。</p><p>1.输出字符串“tiantian”  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ echo tiantian</span><br><span class="line">tiantian</span><br></pre></td></tr></table></figure><p>2.提取变量SHELL的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ echo $SHELL</span><br><span class="line">&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><ul><li><strong>date命令</strong></li></ul><p><strong>格式</strong>：“date [选项] [+指定的格式]”  ，date 命令用于显示及设置系统的时间或日期  。</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709134743022.png" alt="image-20200709134743022" style="zoom:67%;" /><ul><li><strong>reboot命令</strong></li></ul><p>reboot命令用于重启系统</p><ul><li><strong>poweroff命令</strong></li></ul><p>poweroff命令用于关闭系统</p><ul><li><strong>wget命令</strong></li></ul><ul><li><strong>ps命令</strong></li></ul><p><strong>格式</strong>：“ps [参数]”，ps 命令用于查看系统中的进程状态，</p><ul><li><strong>top命令</strong></li></ul><p><strong>格式</strong>： top  </p><p>top 命令用于动态地监视进程活动与系统负载等信息</p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200709141112655.png" alt="image-20200709141112655" style="zoom:67%;" /><p>top 命令执行结果的前 5 行为系统整体的统计信息，其所代表的含义如下。</p><blockquote><p>第 1 行：系统时间、运行时间、登录终端数、系统负载（三个数值分别为 1 分钟、 5分钟、 15 分钟内的平均值，数值越小意味着负载越低）。<br> 第 2 行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。<br> 第 3 行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的资源百分比等。（96.0id 意味着有 96.0%的 CPU 处理器资源处于空闲 ）</p><p>第 4 行：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。</p><p>第 5 行：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、已被提前加载的内存量。  </p></blockquote><ul><li><strong>pidof命令</strong></li></ul><p><strong>格式</strong>：“pidof [参数] [服务名称]”， pidof 命令用于查询某个指定服务进程的 PID 值，</p><p>每个进程的进程号码值（PID）是唯一的，因此可以通过 PID 来区分不同的进程。  </p><ul><li><strong>kill命令</strong></li></ul><p><strong>格式</strong>：“kill [参数] [进程 PID]”，  kill 命令用于终止某个指定 PID 的服务进程</p><ul><li><strong>killall 命令</strong>  </li></ul><p><strong>格式</strong>：“killall [参数] [进程名称]”，killall 命令用于终止某个指定名称的服务所对应的全部进程。</p><h3 id="2-系统状态检测命令"><a href="#2-系统状态检测命令" class="headerlink" title="2.系统状态检测命令"></a>2.系统状态检测命令</h3><ul><li><strong>ifconfig 命令</strong>  </li></ul><p>ifconfig 命令用于获取网卡配置与网络状态等信息，格式为“ifconfig [网络设备] [参数]”。  </p><p>输出如下，网卡名称、 <strong>inet</strong> 参数后面的 IP 地址、 <strong>ether</strong> 参数后面的网卡物理地址（又称为 MAC 地址），以及 <strong>RX</strong>、 <strong>TX</strong> 的接收数据包与发送数据包的个数及累计流量 ，都是重要参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# ifconfig</span><br><span class="line">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.231.130  netmask 255.255.255.0  broadcast 192.168.231.255</span><br><span class="line">        inet6 fe80::cce1:d7a5:4905:6f54  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:09:5b:2c  txqueuelen 1000  (以太网)</span><br><span class="line">        RX packets 2960  bytes 1124457 (1.1 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1266  bytes 186200 (186.2 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (本地环回)</span><br><span class="line">        RX packets 516  bytes 41664 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 516  bytes 41664 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><ul><li><strong>uname</strong>命令</li></ul><p>uname 命令用于查看系统内核与系统版本等信息，格式为“uname [-a]”。  </p><ul><li>*<em>uptime 命令  *</em></li></ul><p>uptime 用于查看系统的负载信息，格式为 uptime。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# uptime</span><br><span class="line"> 14:47:03 up  1:35,  2 users,  load average: 0.04, 0.01, 0.00</span><br></pre></td></tr></table></figure><p>它可以显示当前<strong>系统时间</strong>、<strong>系统已运行时间</strong>、<strong>启用终端数量</strong>以及<strong>平均负载值</strong>等信息。平均负载值指的是系统在最近 1 分钟、 5 分钟、 15 分钟内的压力情况，负载值越低越好  。</p><ul><li><strong>free 命令</strong>  </li></ul><p>free 用于显示当前系统中内存的使用量信息，格式为“free [-h]”。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# free -h</span><br><span class="line">              总计         已用        空闲        共享       缓冲&#x2F;缓存      可用</span><br><span class="line">内存：        1.9G        929M        387M        7.0M        641M        865M</span><br><span class="line">交换：        2.0G          0B        2.0G</span><br></pre></td></tr></table></figure><p><strong>共享</strong>：进程共享的内存量。<strong>缓冲/缓存</strong>：磁盘缓存的内存量。<strong>可用</strong>：缓存的内存量。</p><p>（我的系统显示的是中文）</p><ul><li><strong>who 命令</strong>  </li></ul><p>who 用于查看当前登入主机的用户终端信息，格式为“who [参数]”。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# who</span><br><span class="line">tian     :0           2020-07-09 13:12 (:0)</span><br><span class="line">tian     pts&#x2F;2        2020-07-09 13:15 (192.168.231.1)</span><br></pre></td></tr></table></figure><ul><li><strong>last 命令</strong></li></ul><p>last 命令用于查看所有系统的登录记录，格式为“last [参数]”。</p><ul><li><strong>history 命令</strong></li></ul><p>history 命令用于显示历史执行过的命令，格式为“history”，要清除记录，用<code>history -c</code>。还可以使用“!编码数字”的方式来重复执行某一次的命令。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# history</span><br><span class="line">    1  history</span><br><span class="line">    2  date</span><br><span class="line">    3  history</span><br><span class="line">root@tian-virtual-machine:~# !2</span><br><span class="line">date</span><br><span class="line">2020年 07月 09日 星期四 15:10:56 CST</span><br></pre></td></tr></table></figure><ul><li><strong>sosreport 命令</strong></li></ul><p>sosreport 命令用于收集系统配置及架构信息并输出诊断文档，格式为 sosreport。  </p><h3 id="3-工作目录切换命令"><a href="#3-工作目录切换命令" class="headerlink" title="3.工作目录切换命令"></a>3.工作目录切换命令</h3><ul><li><strong>pwd 命令</strong>  </li></ul><p>pwd 命令用于显示用户当前所处的工作目录，格式为“pwd [选项]”。  </p><ul><li><strong>cd命令</strong></li></ul><p>cd 命令用于切换工作路径，格式为“cd [目录名称]”。  </p><p><code>cd ~</code>切换到根目录，<code>cd -</code>切换到上一次的目录.</p><ul><li><strong>ls命令</strong></li></ul><p>ls 命令用于显示目录中的文件信息，格式为“ls [选项] [文件] ”。  </p><p><code>ls -a</code>看到全部文件（包括隐藏文件）  ,<code>ls -l</code>查看文件的属性、大小等详细信息。  </p><h3 id="4-文本文件编辑命令"><a href="#4-文本文件编辑命令" class="headerlink" title="4.文本文件编辑命令"></a>4.文本文件编辑命令</h3><ul><li><strong>cat命令</strong></li></ul><p>cat 命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。  </p><ul><li>*<em>more 命令  *</em></li></ul><p>more 命令用于查看纯文本文件（内容较多的），格式为“more [选项]文件”。  </p><p>可以使用空格键或回车键向下翻页  </p><ul><li><strong>head 命令</strong>  </li></ul><p>head 命令用于查看纯文本文档的前 N 行，格式为“head [选项] [文件]”。  </p><ul><li>*<em>tail 命令  *</em></li></ul><p>tail 命令用于查看纯文本文档的后 N 行或持续刷新内容，格式为“tail [选项] [文件]”。  </p><ul><li><strong>tr 命令</strong>  </li></ul><p>tr 命令用于替换文本文件中的字符，格式为“tr [原始字符] [目标字符]”。  </p><ul><li><strong>wc 命令</strong>  </li></ul><p>wc 命令用于统计指定文本的行数、字数、字节数，格式为“wc [参数] 文本”。  </p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-l</td><td align="center">只显示行数</td></tr><tr><td align="center">-w</td><td align="center">只显示单词数</td></tr><tr><td align="center">-c</td><td align="center">只显示字节数</td></tr></tbody></table><ul><li><strong>stat 命令</strong>  </li></ul><p>stat 命令用于查看文件的具体存储信息和时间等信息，格式为“stat 文件名称”。  </p><ul><li><strong>cut 命令</strong>  </li></ul><p>cut 命令用于按“列”提取文本字符，格式为“cut [参数] 文本”。  </p><ul><li><strong>diff 命令</strong>  </li></ul><p>diff 命令用于比较多个文本文件的差异，格式为“diff [参数] 文件”。  </p><p>以使用–brief 参数来确认两个文件是否不同，还可以使用-c参数来详细比较出多个文件的差异之处，  </p><h2 id="5-文件目录管理命令"><a href="#5-文件目录管理命令" class="headerlink" title="5.文件目录管理命令"></a>5.文件目录管理命令</h2><ul><li><strong>touch 命令</strong>  </li></ul><p>touch 命令用于创建空白文件或设置文件的时间，格式为“touch [选项] [文件]”。  </p><p>创建tian.txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ touch tian.txt</span><br></pre></td></tr></table></figure><ul><li><strong>mkdir 命令</strong>  </li></ul><p>mkdir 命令用于创建空白的目录，格式为“mkdir [选项] 目录”。  </p><p>创建tian文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ mkdir tian</span><br></pre></td></tr></table></figure><ul><li><strong>cp 命令</strong>  </li></ul><p>cp 命令用于复制文件或目录，格式为“cp [选项] 源文件 目标文件”。  </p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-p</td><td>保留原始文件的属性</td></tr><tr><td>-d</td><td>若对象为“链接文件”，则保留该“链接文件”的属性</td></tr><tr><td>-r</td><td>递归持续复制（用于目录）</td></tr><tr><td>-i</td><td>若目标文件存在则询问是否覆盖</td></tr><tr><td>-a</td><td>相当于-pdr（p、 d、 r 为上述参数）</td></tr></tbody></table><p>将tian.txt复制到tian文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ cp tian.txt tian</span><br></pre></td></tr></table></figure><ul><li><strong>mv 命令</strong>  </li></ul><p>mv 命令用于剪切文件或将文件重命名，格式为“mv [选项] 源文件 [目标路径|目标文件名]”。  </p><ul><li><strong>rm 命令</strong>  </li></ul><p>rm 命令用于删除文件或目录，格式为“rm [选项] 文件”。</p><p>rm 命令后跟上-f 参数来强制删除。</p><p> 想要删除一个目录，需要在 rm 命令后面一个-r 参数    </p><ul><li><strong>dd 命令</strong>  </li></ul><p>dd 命令用于按照指定大小和个数的数据块来复制文件或转换文件，格式为“dd [参数]”。  </p><ul><li><strong>file 命令</strong>  </li></ul><p>file 命令用于查看文件的类型，格式为“file 文件名”。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ file tian.txt</span><br><span class="line">tian.txt: ASCII text</span><br></pre></td></tr></table></figure><h2 id="6-打包与压缩的命令"><a href="#6-打包与压缩的命令" class="headerlink" title="6.打包与压缩的命令"></a>6.打包与压缩的命令</h2><ul><li><strong>tar 命令</strong>  </li></ul><p>tar 命令用于对文件进行打包压缩或解压，格式为“tar [选项] [文件]”。  </p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">创建压缩文件</td></tr><tr><td align="center">-x</td><td align="center">解开压缩文件</td></tr><tr><td align="center">-t</td><td align="center">查看压缩包内有哪些文件</td></tr><tr><td align="center">-z</td><td align="center">用 Gzip 压缩或解压</td></tr><tr><td align="center">-j</td><td align="center">用 bzip2 压缩或解压</td></tr><tr><td align="center">-v</td><td align="center">显示压缩或解压的过程</td></tr><tr><td align="center">-f</td><td align="center">目标文件名</td></tr><tr><td align="center">-p</td><td align="center">保留原始的权限与属性</td></tr><tr><td align="center">-P</td><td align="center">使用绝对路径来压缩</td></tr><tr><td align="center">-C</td><td align="center">指定解压到的目录</td></tr></tbody></table><p>将tian文件夹用 Gzip 压缩，并且显示压缩的过程，压缩文件命名为tian.gz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ tar -czvf tian.gz tian</span><br><span class="line">tian&#x2F;</span><br><span class="line">tian&#x2F;tian.txt</span><br></pre></td></tr></table></figure><ul><li><strong>grep 命令</strong>  </li></ul><p>grep 命令用于在文本中执行关键词搜索，并显示匹配的结果，格式为“grep [选项] [文件]”。  </p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-b</td><td align="center">将可执行文件（binary）当作文本文件（text）来搜索</td></tr><tr><td align="center">-c</td><td align="center">仅显示找到的行数</td></tr><tr><td align="center">-i</td><td align="center">忽略大小写</td></tr><tr><td align="center">-n</td><td align="center">显示行号</td></tr><tr><td align="center">-v</td><td align="center">反向选择—仅列出没有“关键词”的行</td></tr></tbody></table><p>在tian.txt文件中找“c”,结果只显示c的行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ grep -n c tian.txt</span><br><span class="line">3:c</span><br></pre></td></tr></table></figure><ul><li><strong>find 命令</strong>  </li></ul><p>find 命令用于按照指定条件来查找文件，格式为“find [查找路径] 寻找条件 操作”。  </p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-name</td><td>匹配名称</td></tr><tr><td>-perm</td><td>匹配权限（mode 为完全匹配， -mode 为包含即可）</td></tr><tr><td>-user</td><td>匹配所有者</td></tr><tr><td>-group</td><td>匹配所有组</td></tr><tr><td>-mtime -n +n</td><td>匹配修改内容的时间（-n 指 n 天以内， +n 指 n 天以前）</td></tr><tr><td>-atime -n +n</td><td>匹配访问文件的时间（-n 指 n 天以内， +n 指 n 天以前）</td></tr><tr><td>-ctime -n +n</td><td>匹配修改文件权限的时间（-n 指 n 天以内， +n 指 n 天以前）</td></tr><tr><td>-nouser</td><td>匹配无所有者的文件</td></tr><tr><td>-nogroup</td><td>匹配无所有组的文件</td></tr><tr><td>-newer f1 !f2</td><td>匹配比文件 f1 新但比 f2 旧的文件</td></tr><tr><td>–type b/d/c/p/l/f</td><td>匹配文件类型（后面的字幕参数依次表示块设备、目录、字符设备、管道、 链接文件、文本文件）</td></tr><tr><td>-size</td><td>匹配文件的大小（+50KB 为查找超过 50KB 的文件，而-50KB 为查找小于 50KB 的文件）</td></tr><tr><td>-prune</td><td>忽略某个目录</td></tr><tr><td>-exec …… {};</td><td>后面可跟用于进一步处理搜索结果的命令（下文会有演示）</td></tr></tbody></table><h1 id="第三章——管道符、重定向与环境变量"><a href="#第三章——管道符、重定向与环境变量" class="headerlink" title="第三章——管道符、重定向与环境变量"></a>第三章——管道符、重定向与环境变量</h1><h2 id="1-输入输出重定向"><a href="#1-输入输出重定向" class="headerlink" title="1.输入输出重定向"></a>1.输入输出重定向</h2><p><strong>输入重定向</strong>：把文件导入到命令中。</p><p><strong>输出重定向</strong>：把原本要输出到屏幕的数据信息写入到指定文件中。</p><blockquote><p><strong>标准输出重定向</strong>: 错误信息不会被输出到重定向的文件里。</p><p><strong>错误输出重定向</strong>: 错误信息也会输出到重定向的文件里。两者具体区别可以看下面的例子</p></blockquote><p>​                    </p><p> <strong><em>输入重定向中用到的符号及其作用</em></strong></p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &lt; 文件</td><td>将文件作为命令的标准输入</td></tr><tr><td>命令 &lt;&lt; 分界符</td><td>从标准输入中读入，直到遇见分界符才停止</td></tr><tr><td>命令 &lt; 文件 1 &gt; 文件 2</td><td>将文件 1 作为命令的标准输入并将标准输出到文件 2</td></tr></tbody></table><p> <strong><em>输出重定向中用到的符号及其作用</em></strong></p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt; 文件</td><td>将标准输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 2&gt; 文件</td><td>将错误输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 &gt;&gt; 文件</td><td>将标准输出重定向到一个文件中（追加到原有内容的后面）</td></tr><tr><td>命令 2&gt;&gt; 文件</td><td>将错误输出重定向到一个文件中（追加到原有内容的后面）</td></tr><tr><td>命令 &gt;&gt; 文件 2&gt;&amp;1 或 命令 &amp;&gt;&gt; 文件</td><td>将标准输出与错误输出共同写入到文件中（追加到原有内容的 后面）</td></tr></tbody></table><p><strong>例子</strong>：</p><p><strong>1</strong>.将<code>man ls</code>的输出内容写到tian.txt文件里面去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ man ls &gt; tian.txt</span><br></pre></td></tr></table></figure><p><strong>2</strong>.用<code>tian tian aaaa</code>覆盖tian.txt里面的内容，<code>tian tian bbbb</code>追加在后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ echo &quot;tian tian aaaa&quot;&gt;tian.txt</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ cat tian.txt</span><br><span class="line">tian tian aaaa</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ echo &quot;tian tian bbbb&quot;&gt;&gt;tian.txt</span><br><span class="line">tian tian aaaa</span><br><span class="line">tian tian bbbb</span><br></pre></td></tr></table></figure><p><strong>3</strong>.使用标准输出重定向（222是不存在的目录，瞎编的）</p><p>可以看到，第3行进行查看tian.txt，显示是空，说明错误提示并没有输入到tian.txt里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ ls -l 222  &gt;tian.txt</span><br><span class="line">ls: 无法访问&#39;222&#39;: 没有那个文件或目录</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ cat tian.txt</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian$</span><br></pre></td></tr></table></figure><p><strong>4</strong>.使用错误输出重定向（222是不存在的目录，瞎编的）</p><p>可以看到，第2行进行查看tian.txt，显示内容就是<code>ls -l 222 2&gt;tian.txt</code>的错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ ls -l 222 2&gt;tian.txt</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ cat tian.txt</span><br><span class="line">ls: 无法访问&#39;222&#39;: 没有那个文件或目录</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian$</span><br></pre></td></tr></table></figure><h2 id="2-管道命令符（-）"><a href="#2-管道命令符（-）" class="headerlink" title="2.管道命令符（|）"></a>2.管道命令符（|）</h2><p><strong>作用</strong>：把前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输入  </p><h2 id="3-命令行的通配符"><a href="#3-命令行的通配符" class="headerlink" title="3.命令行的通配符"></a>3.命令行的通配符</h2><p><strong>星号（*）</strong>：匹配零个或多个字符</p><p><strong>问号（?）</strong>：代表匹配单个字符</p><p><strong>[0-9]</strong> : 代表匹配 0～9之间的单个数字的字符,当然，括号里面的范围可以自己定义。</p><p><strong>[abc]</strong> :则是代表匹配 a、 b、 c 三个字符中的任意一个字符。  </p><h2 id="4-常用的转义字符"><a href="#4-常用的转义字符" class="headerlink" title="4.常用的转义字符"></a>4.常用的转义字符</h2><p>4 个最常用的转义字符如下所示。</p><blockquote><p><strong>反斜杠（\）</strong>：使反斜杠后面的一个变量变为单纯的字符串。<br><strong>单引号（’’）</strong>：转义其中所有的变量为单纯的字符串。<br><strong>双引号（””）</strong>：保留其中的变量属性，不进行转义处理。<br><strong>反引号（``）</strong>：把其中的命令执行后返回结果。  </p></blockquote><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~&#x2F;tian$   echo uname -a</span><br><span class="line">uname -a</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian$ echo &#96;uname -a&#96;</span><br><span class="line">Linux tian-virtual-machine 5.3.0-51-generic #44~18.04.2-Ubuntu SMP Thu Apr 23 14:27:18 UTC 2020 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure><h2 id="5-重要的环境变量"><a href="#5-重要的环境变量" class="headerlink" title="5.重要的环境变量"></a>5.重要的环境变量</h2><p>Linux 系统中最重要的 10 个环境变量  </p><table><thead><tr><th>变量名称</th><th>作用</th></tr></thead><tbody><tr><td>HOME</td><td>用户的主目录（即家目录）</td></tr><tr><td>SHELL</td><td>用户在使用的 Shell 解释器名称</td></tr><tr><td>HISTSIZE</td><td>输出的历史命令记录条数</td></tr><tr><td>HISTFILESIZE</td><td>保存的历史命令记录条数</td></tr><tr><td>MAIL</td><td>邮件保存路径</td></tr><tr><td>LANG</td><td>系统语言、语系名称</td></tr><tr><td>RANDOM</td><td>生成一个随机数字</td></tr><tr><td>PS1</td><td>Bash 解释器的提示符</td></tr><tr><td>PATH</td><td>定义解释器搜索用户执行命令的路径</td></tr><tr><td>EDITOR</td><td>用户默认的文本编辑器</td></tr></tbody></table><p>查看变量值，可以使用<code>echo $变量</code>,例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>我们完全可以自行创建变量，来满足工作需求。例如设置一个名称为 WORKDIR 的变量，方便用户更轻松地进入一个层次较深的目录：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ mkdir tian&#x2F;zhu&#x2F;da</span><br><span class="line">tian@tian-virtual-machine:~$ WORKDIR&#x3D;tian&#x2F;zhu&#x2F;da</span><br><span class="line">tian@tian-virtual-machine:~$ cd $WORKDIR</span><br><span class="line">tian@tian-virtual-machine:~&#x2F;tian&#x2F;zhu&#x2F;da$ pwd</span><br><span class="line">&#x2F;home&#x2F;tian&#x2F;tian&#x2F;zhu&#x2F;da</span><br></pre></td></tr></table></figure><h1 id="第四章——Vim-编辑器与-Shell-命令脚本"><a href="#第四章——Vim-编辑器与-Shell-命令脚本" class="headerlink" title="第四章——Vim 编辑器与 Shell 命令脚本"></a>第四章——Vim 编辑器与 Shell 命令脚本</h1><h2 id="1-Vim-文本编辑器"><a href="#1-Vim-文本编辑器" class="headerlink" title="1.Vim 文本编辑器"></a>1.Vim 文本编辑器</h2><h3 id="1-1三种模式"><a href="#1-1三种模式" class="headerlink" title="1.1三种模式"></a>1.1三种模式</h3><blockquote><p>(1)<strong>命令模式</strong>：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。<br>(2)<strong>输入模式</strong>：正常的文本录入。<br>(3)<strong>末行模式</strong>：保存或退出文档，以及设置编辑环境。 </p></blockquote><p>在每次运行 Vim 编辑器时，默认进入命令模式  </p><p><strong>三种模式切换方法</strong>： </p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200712173900187.png" alt="image-20200712173900187" style="zoom:67%;" /><h3 id="1-2-常用命令"><a href="#1-2-常用命令" class="headerlink" title="1.2 常用命令"></a>1.2 常用命令</h3><p>（<strong>1）命令模式中常用的一些命令</strong></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dd</td><td>删除（剪切）光标所在整行</td></tr><tr><td>5dd</td><td>删除（剪切）从光标处开始的 5 行</td></tr><tr><td>yy</td><td>复制光标所在整行</td></tr><tr><td>5yy</td><td>复制从光标处开始的 5 行</td></tr><tr><td>n</td><td>显示搜索命令定位到的下一个字符串</td></tr><tr><td>N</td><td>显示搜索命令定位到的上一个字符串</td></tr><tr><td>u</td><td>撤销上一步的操作</td></tr><tr><td>p</td><td>将之前删除（dd）或复制（yy）过的数据粘贴到光标后面</td></tr></tbody></table><p><strong>（2）末行模式中常用的一些命令</strong></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:q!</td><td>强制退出（放弃对文档的修改内容）</td></tr><tr><td>:wq!</td><td>强制保存退出</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>不显示行号</td></tr><tr><td>:命令</td><td>执行该命令</td></tr><tr><td>:整数</td><td>跳转到该行</td></tr><tr><td>:s/one/two</td><td>将当前光标所在行的第一个 one 替换成 two</td></tr><tr><td>:s/one/two/g</td><td>将当前光标所在行的所有 one 替换成 two</td></tr><tr><td>:%s/one/two/g</td><td>将全文中的所有 one 替换成 two</td></tr><tr><td>?字符串</td><td>在文本中从下至上搜索该字符串</td></tr><tr><td>/字符串</td><td>在文本中从上至下搜索该字符串</td></tr></tbody></table><h2 id="2-编写-Shell-脚本"><a href="#2-编写-Shell-脚本" class="headerlink" title="2.编写 Shell 脚本"></a>2.编写 Shell 脚本</h2><h3 id="2-1编写一个简单脚本"><a href="#2-1编写一个简单脚本" class="headerlink" title="2.1编写一个简单脚本"></a>2.1编写一个简单脚本</h3><p>第一行的脚本声明（#!）用来告诉系统使用哪种 Shell 解释器来执行该脚本。</p><p>第二行的注释信息（#）是对脚本功能和某些命令的介绍信息，使得自己或他人在日后看到这个脚本内容时，可以快速知道该<br>脚本的作用或一些警告信息。</p><p>第三、四行的可执行语句也就是我们平时执行的 Linux 命令了。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# touch tiana.sh</span><br><span class="line">root@tian-virtual-machine:~# vim tiana.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#一个简单脚本</span><br><span class="line">pwd</span><br><span class="line">ls -a</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">root@tian-virtual-machine:~# cat tiana.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#一个简单脚本</span><br><span class="line">pwd</span><br><span class="line">ls -a</span><br><span class="line">root@tian-virtual-machine:~# bash tiana.sh</span><br><span class="line">&#x2F;root</span><br><span class="line">.  ..  .bash_history  .bashrc  .cache  .gnupg  .profile  tiana.sh  .viminfo</span><br><span class="line">root@tian-virtual-machine:~#</span><br></pre></td></tr></table></figure><h3 id="2-2-接收用户的参数"><a href="#2-2-接收用户的参数" class="headerlink" title="2.2 接收用户的参数"></a>2.2 接收用户的参数</h3><p>一些字符的含义：</p><blockquote><p><strong>$0</strong> ：当前 Shell 脚本程序的名称</p><p><strong>$#</strong>：参数总数</p><p> <strong>$*</strong>：对应的是所有位置的参数值</p><p><strong>$?</strong>：对应的是显示上一次命令的执行返回值</p><p><strong>$N</strong>：第 N 个位置的参数值  </p></blockquote><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">tian@tian-virtual-machine:~$ vim tiana.sh</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo &quot;当前脚本名称是$0&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;当前总共有$#个参数，分别是$*&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;第一个参数是$1&quot;</span><br><span class="line"></span><br><span class="line">~</span><br><span class="line">这里省略了一大堆“~”</span><br><span class="line">~</span><br><span class="line">&quot;tiana.sh&quot; [新] 8L, 123C 已写入                                                                                                 </span><br><span class="line">tian@tian-virtual-machine:~$ sh tiana.sh 1 2 3 4</span><br><span class="line">当前脚本名称是tiana.sh</span><br><span class="line">当前总共有4个参数，分别是1 2 3 4</span><br><span class="line">第一个参数是1</span><br><span class="line">tian@tian-virtual-machine:~$</span><br></pre></td></tr></table></figure><h3 id="2-3判断用户的参数"><a href="#2-3判断用户的参数" class="headerlink" title="2.3判断用户的参数"></a>2.3判断用户的参数</h3><p><strong>（1）文件判断</strong></p><p>Shell 脚本中的条件测试语法可以判断表达式是否成立，若条件成立则返回数字 0，否则便返回其他随机数值。  </p><p>条件测试语法的执行格式如下图所示，切记，<strong>条件表达式两边均应有一个空格</strong>。  </p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200713131623637.png" alt="image-20200713131623637" style="zoom:80%;" /><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>测试文件是否为目录类型</td></tr><tr><td>-e</td><td>测试文件是否存在</td></tr><tr><td>-f</td><td>判断是否为一般文件</td></tr><tr><td>-r</td><td>测试当前用户是否有权限读取</td></tr><tr><td>-w</td><td>测试当前用户是否有权限写入</td></tr><tr><td>-x</td><td>测试当前用户是否有权限执行</td></tr></tbody></table><div align="center">文件测试所用参数表<div><p><strong>（2）逻辑判断</strong></p><p>还可以利用逻辑语句对测试结果进行逻辑分析，根据测试结果可实现不同的效果。</p><p><strong>&amp;&amp;</strong>：表示当前面的命令执行成功后才会执行它后面的命令 。</p><p><strong>||</strong>  ：表示当前面的命令执行失败后才会执行它后面的命令  </p><p><strong>！</strong>  ：表示把条件测试中的判断结果取相反值  </p><p><strong>例子</strong>(tian.sh是存在的，t.sh是不存在的)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# ls -a</span><br><span class="line">.  ..  .bash_history  .bashrc  .cache  .gnupg  .profile  tiana.sh  tian.sh  .viminfo</span><br><span class="line">root@tian-virtual-machine:~# [ -f tian.sh ]</span><br><span class="line">root@tian-virtual-machine:~# echo $?</span><br><span class="line">0</span><br><span class="line">root@tian-virtual-machine:~# [ -f tian.sh ] &amp;&amp; echo &quot;存在&quot;</span><br><span class="line">存在</span><br><span class="line">root@tian-virtual-machine:~# [ -f t.sh ] || echo &quot;存在&quot;</span><br><span class="line">存在</span><br><span class="line">root@tian-virtual-machine:~# [ ! -f tian.sh ] || echo &quot;存在&quot;</span><br><span class="line">存在</span><br><span class="line">root@tian-virtual-machine:~#</span><br></pre></td></tr></table></figure><p><strong>再来看一个复杂一点的例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# [ ! -f tian.sh ] &amp;&amp; echo &quot;不存在&quot; || echo &quot;存在&quot; </span><br><span class="line">存在</span><br></pre></td></tr></table></figure><p><strong>（3）整数判断</strong></p><p>整数比较运算符仅是对数字的操作，不能将数字与字符串、文件等内容一起操作  </p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>-eq</td><td>是否等于</td></tr><tr><td>-ne</td><td>是否不等于</td></tr><tr><td>-gt</td><td>是否大于</td></tr><tr><td>-lt</td><td>是否小于</td></tr><tr><td>-le</td><td>是否等于或小于</td></tr><tr><td>-ge</td><td>是否大于或等于</td></tr></tbody></table><div align="center">可用的整数比较运算符表<div><p><strong>例子1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# [ 10 -eq 10 ] &amp;&amp; echo &quot;10&#x3D;10&quot;</span><br><span class="line">10&#x3D;10</span><br></pre></td></tr></table></figure><p><strong>例子2</strong>：判断内存是否不足，小于1024内存不足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# free -m</span><br><span class="line">              总计         已用        空闲      共享    缓冲&#x2F;缓存    可用</span><br><span class="line">内存：        1958         878         442           9         638         914</span><br><span class="line">交换：        2047           0        2047</span><br><span class="line">root@tian-virtual-machine:~# free -m | grep &quot;内存：&quot;</span><br><span class="line">内存：        1958         878         442           9         638         914</span><br><span class="line">root@tian-virtual-machine:~# free -m</span><br><span class="line">              总计         已用        空闲      共享    缓冲&#x2F;缓存    可用</span><br><span class="line">内存：        1958         878         442           9         638         914</span><br><span class="line">交换：        2047           0        2047</span><br><span class="line">root@tian-virtual-machine:~# free -m | grep &quot;内存：&quot;</span><br><span class="line">内存：        1958         878         442           9         638         914</span><br><span class="line">root@tian-virtual-machine:~# free -m | grep &quot;内存：&quot; | awk &#39;&#123;print $4&#125;&#39;</span><br><span class="line">442</span><br><span class="line">root@tian-virtual-machine:~# FreeMem&#x3D;&#96;free -m | grep &quot;内存：&quot; | awk &#39;&#123;print $4&#125;&#39;&#96;</span><br><span class="line">root@tian-virtual-machine:~# echo $FreeMem</span><br><span class="line">441            </span><br><span class="line">root@tian-virtual-machine:~# [ $FreeMem -lt 1024 ] &amp;&amp; echo &quot;内存不足&quot;</span><br><span class="line">内存不足</span><br><span class="line">root@tian-virtual-machine:~#</span><br></pre></td></tr></table></figure><p><code>free -m</code>: 获取当前系统正在使用及可用的内存量信息，-m是以Mb显示。</p><p><code>grep &quot;内存：&quot;</code>:只显示“内存”这一行。</p><p><code>awk &#39;{print $4}&#39;</code>:只保留第四列 。</p><p><strong>（4）.字符判断</strong></p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>=</td><td>比较字符串内容是否相同</td></tr><tr><td>!=</td><td>比较字符串内容是否不同</td></tr><tr><td>-z</td><td>判断字符串内容是否为空</td></tr></tbody></table><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# [ fkjdk &#x3D; dslfk ]</span><br><span class="line">root@tian-virtual-machine:~# echo $?</span><br><span class="line">1</span><br><span class="line">root@tian-virtual-machine:~# [ ff &#x3D; ff ]</span><br><span class="line">root@tian-virtual-machine:~# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="2-4流程控制语句"><a href="#2-4流程控制语句" class="headerlink" title="2.4流程控制语句"></a>2.4流程控制语句</h3><p><strong>（1）if 条件测试语句</strong>  </p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200713214739410.png" alt="image-20200713214739410" style="zoom:80%;" /><p><strong>例子</strong>：</p><p>为了避免用户等待时间过长，需要通过-c 参数来规定尝试的次数，并使用-i 参数定义每个数据包的发送间隔，以及使用-W 参数定义等待超时时间  ，192.168.231.134是虚拟机ip地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# vim test_ping.sh</span><br><span class="line">#!bin&#x2F;bash</span><br><span class="line">ping -c 3 -i 0.2 -w 3 $1 &amp;&gt; &#x2F;dev&#x2F;null</span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;Host $1 is On-line&quot;</span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">        echo &quot;Host $1 is off-line&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">&quot;test_ping.sh&quot; 10L, 135C 已写入                                                                                                 </span><br><span class="line">root@tian-virtual-machine:~# bash test_ping.sh 192.168.231.134</span><br><span class="line">Host 192.168.231.134 is On-line</span><br><span class="line">root@tian-virtual-machine:~# bash test_ping.sh 192.168.231.133</span><br><span class="line">Host 192.168.231.133 is off-line</span><br><span class="line">root@tian-virtual-machine:~#</span><br></pre></td></tr></table></figure><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200713215013499.png" alt="image-20200713215013499" style="zoom:80%;" /><p><strong>（2）for 条件循环语句</strong>  </p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200713222547486.png" alt="image-20200713222547486" style="zoom:80%;" /><p><strong>例子</strong>：尝试让脚本从文本中自动读取主机列表（ip_test.txt），然后自动逐个测试这些主机是否在线。  </p><p><strong>$（命令）</strong>:执行括号或双引号括起来的命令。  </p><p><strong>/dev/null</strong> 是一个被称作 Linux 黑洞的文件，把输出信息重定向到这个文件等同于删除数据（类似于没有回收功能的垃圾箱），可以让用户的屏幕窗口保持简洁。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# vim ip_test.txt</span><br><span class="line">192.168.231.134</span><br><span class="line"></span><br><span class="line">192.168.231.135</span><br><span class="line"></span><br><span class="line">192.168.231.136</span><br><span class="line">root@tian-virtual-machine:~# vim ip_test.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">HLIST&#x3D;$(cat ip_test.txt)</span><br><span class="line">for IP in $HLIST</span><br><span class="line">do</span><br><span class="line">        ping -c 3 -i 0.2 -w 3 $IP &amp;&gt; &#x2F;dev&#x2F;null</span><br><span class="line">        if [ $? -eq 0 ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;HOST $IP is On-line&quot;</span><br><span class="line">        else</span><br><span class="line"></span><br><span class="line">                echo &quot;HOST $IP is off-line&quot;</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">&quot;ip_test.sh&quot; 13L, 197C 已写入                                                                                                   </span><br><span class="line">root@tian-virtual-machine:~# bash ip_test.sh</span><br><span class="line">HOST 192.168.231.134 is off-line</span><br><span class="line">HOST 192.168.231.135 is On-line</span><br><span class="line">HOST 192.168.231.136 is off-line</span><br><span class="line">root@tian-virtual-machine:~#</span><br></pre></td></tr></table></figure><p><strong>(3)while 条件循环语句</strong>  </p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200713232222990.png" alt="image-20200713232222990" style="zoom:80%;" /><p><strong>例子</strong>：编写一个用来猜测数值大小的脚本 guess.sh。  </p><p><strong>$RANDOM</strong>：调取出一个随机的数值（范围为 0～32767） </p><p><strong>expr</strong>：使用 expr 命令取得$RANDOM结果  </p><p><strong>read -p</strong>：读入用户输入的信息到后面的变量（INT），-p是添加提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# vim guess.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">PRICE&#x3D;$(expr $RANDOM % 1000)</span><br><span class="line">TIMES&#x3D;0</span><br><span class="line">echo &quot;我这里有个宝贝价格在0~999之间，猜猜看是多少？&quot;</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">        read -p &quot;请输入你猜测的价格：&quot; INT</span><br><span class="line">        let TIMES++</span><br><span class="line">        if [ $INT -eq $PRICE ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;恭喜你答对了！实际价格是$PRICE&quot;</span><br><span class="line">                echo &quot;你共猜了$TIMES次&quot;</span><br><span class="line">                exit 0</span><br><span class="line">        elif [ $INT -gt $PRICE ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;太高了！&quot;</span><br><span class="line">        else</span><br><span class="line">                echo &quot;太低了！&quot;</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">&quot;guess.sh&quot; 20L, 408C 已写入                                                                                                     </span><br><span class="line">root@tian-virtual-machine:~# bash guess.sh</span><br><span class="line">我这里有个宝贝价格在0~999之间，猜猜看是多少？</span><br><span class="line">请输入你猜测的价格：500</span><br><span class="line">太低了！</span><br><span class="line">请输入你猜测的价格：750</span><br><span class="line">太低了！</span><br><span class="line">请输入你猜测的价格：875</span><br><span class="line">太高了！</span><br><span class="line">请输入你猜测的价格：812</span><br><span class="line">太低了！</span><br><span class="line">请输入你猜测的价格：840</span><br><span class="line">太低了！</span><br><span class="line">请输入你猜测的价格：858</span><br><span class="line">太高了！</span><br><span class="line">请输入你猜测的价格：850</span><br><span class="line">太低了！</span><br><span class="line">请输入你猜测的价格：854</span><br><span class="line">太高了！</span><br><span class="line">请输入你猜测的价格：852</span><br><span class="line">恭喜你答对了！实际价格是852</span><br><span class="line">你共猜了9次</span><br></pre></td></tr></table></figure><p><strong>（4）case 条件测试语句</strong>  </p><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/image-20200713234812734.png" alt="image-20200713234812734" style="zoom: 67%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim Checkkeys.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入一个字符，并按 Enter 键确认： &quot; KEY</span><br><span class="line">case &quot;$KEY&quot; in</span><br><span class="line">[a-z]|[A-Z])</span><br><span class="line">echo &quot;您输入的是 字母。 &quot;</span><br><span class="line">;;</span><br><span class="line">[0-9])</span><br><span class="line">echo &quot;您输入的是 数字。 &quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;您输入的是 空格、功能键或其他控制字符。 &quot;</span><br><span class="line">esac</span><br><span class="line">[root@linuxprobe ~]# bash Checkkeys.sh</span><br><span class="line">请输入一个字符，并按 Enter 键确认： 6</span><br><span class="line">您输入的是 数字。</span><br><span class="line">[root@linuxprobe ~]# bash Checkkeys.sh</span><br><span class="line">请输入一个字符，并按 Enter 键确认： p</span><br><span class="line">您输入的是 字母。</span><br><span class="line">[root@linuxprobe ~]# bash Checkkeys.sh</span><br><span class="line">请输入一个字符，并按 Enter 键确认： ^[[15~</span><br><span class="line">您输入的是 空格、功能键或其他控制字符。</span><br></pre></td></tr></table></figure><h2 id="2-5计划任务服务程序"><a href="#2-5计划任务服务程序" class="headerlink" title="2.5计划任务服务程序"></a>2.5计划任务服务程序</h2><h1 id="第五章——用户身份与文件权限"><a href="#第五章——用户身份与文件权限" class="headerlink" title="第五章——用户身份与文件权限"></a>第五章——用户身份与文件权限</h1><h2 id="1-用户身份与能力"><a href="#1-用户身份与能力" class="headerlink" title="1.用户身份与能力"></a>1.用户身份与能力</h2><h3 id="1-1-useradd-命令"><a href="#1-1-useradd-命令" class="headerlink" title="1.1 useradd 命令"></a>1.1 useradd 命令</h3><p>useradd 命令用于创建新的用户，格式为“useradd [选项] 用户名”。  </p><div align="center">useradd 命令中的用户参数以及作用</div><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>指定用户的家目录（默认为/home/username）</td></tr><tr><td>-e</td><td>账户的到期时间，格式为 YYYY-MM-DD.</td></tr><tr><td>-u</td><td>指定该用户的默认 UID</td></tr><tr><td>-g</td><td>指定一个初始的用户基本组（必须已存在）</td></tr><tr><td>-G</td><td>指定一个或多个扩展用户组</td></tr><tr><td>-N</td><td>不创建与用户同名的基本用户组</td></tr><tr><td>-s</td><td>指定该用户的默认 Shell 解释器</td></tr></tbody></table><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# useradd -d &#x2F;tian&#x2F;zhu zhu</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# id zhu</span><br><span class="line">uid&#x3D;1001(zhu) gid&#x3D;1001(zhu) 组&#x3D;1001(zhu)</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian#</span><br></pre></td></tr></table></figure><h3 id="1-2-groupadd-命令"><a href="#1-2-groupadd-命令" class="headerlink" title="1.2 groupadd 命令"></a>1.2 groupadd 命令</h3><p>groupadd 命令用于创建用户组，格式为“groupadd [选项] 群组名”。  </p><h3 id="1-3usermod-命令"><a href="#1-3usermod-命令" class="headerlink" title="1.3usermod 命令"></a>1.3usermod 命令</h3><p>usermod 命令用于修改用户的属性，格式为“usermod [选项] 用户名”。  </p><div align="center">usermod 命令中的参数及作用 </div><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>填写用户账户的备注信息</td></tr><tr><td>-d -m</td><td>参数-m 与参数-d 连用，可重新指定用户的家目录并自动把旧的数据转移过去</td></tr><tr><td>-e</td><td>账户的到期时间，格式为 YYYY-MM-DD</td></tr><tr><td>-g</td><td>变更所属用户组</td></tr><tr><td>G</td><td>变更扩展用户组</td></tr><tr><td>-L</td><td>锁定用户禁止其登录系统</td></tr><tr><td>-U</td><td>解锁用户，允许其登录系统</td></tr><tr><td>-s</td><td>变更默认终端</td></tr><tr><td>-u</td><td>修改用户的 UID</td></tr></tbody></table><p><strong>例子</strong>：把用户zhu添加到root组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# usermod -G root zhu</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# id zhu</span><br><span class="line">uid&#x3D;1001(zhu) gid&#x3D;1001(zhu) 组&#x3D;1001(zhu),0(root)</span><br></pre></td></tr></table></figure><h3 id="1-4passwd-命令"><a href="#1-4passwd-命令" class="headerlink" title="1.4passwd 命令"></a>1.4passwd 命令</h3><p>passwd 命令用于修改用户密码、过期时间、认证信息等，格式为“passwd [选项] [用户名]”。  </p><div align="center">usermod 命令中的参数以及作用 </div><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-l</td><td>锁定用户，禁止其登录</td></tr><tr><td>-u</td><td>解除锁定，允许用户登录</td></tr><tr><td>–stdin</td><td>允许通过标准输入修改用户密码，如 echo “NewPassWord” | passwd –stdin Username</td></tr><tr><td>-d</td><td>使该用户可用空密码登录系统</td></tr><tr><td>-e</td><td>强制用户在下次登录时修改密码</td></tr><tr><td>-S</td><td>显示用户的密码是否被锁定，以及密码所采用的加密算法名称</td></tr></tbody></table><h3 id="1-5userdel-命令"><a href="#1-5userdel-命令" class="headerlink" title="1.5userdel 命令"></a>1.5userdel 命令</h3><p>userdel 命令用于删除用户，格式为“userdel [选项] 用户名”  。</p><div align="center">userdel 命令的参数以及作用 </div><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-f</td><td>强制删除用户</td></tr><tr><td>-r</td><td>同时删除用户及用户家目录</td></tr></tbody></table><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# userdel zhu</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# id zhu</span><br><span class="line">id: &quot;zhu&quot;: no such user</span><br></pre></td></tr></table></figure><h2 id="2-文件权限与归属"><a href="#2-文件权限与归属" class="headerlink" title="2.文件权限与归属"></a>2.文件权限与归属</h2><p>在 Linux 系统中，每个文件都有所属的所有者和所有组，并且规定了文件的所有者、所有组以及其他人对文件所拥有的可读（r）、可写（w）、可执行（x）等权限。对目录文件来说，“可读”表示能够读取目录内的文件列表；“可写”表示能够在目录内新增、删除、重命名文件；而“可执行”则表示能够进入该目录。    </p><p>文件的读、写、执行权限可以简写为 rwx，亦可分别用数字 4、 2、 1 来表示  。例如，若某个文件的权限为 7 则代表可读、可写、可执行（4+2+1）；若权限为 6 则代表可读、可写（4+2）。  </p><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# ls -l tian.txt</span><br><span class="line">-rw-rw-r-- 1 tian tian 14 7月  11 14:20 tian.txt</span><br></pre></td></tr></table></figure><p>这里表示文件的所有者、所有组以及其他人对tian.txt的权限分别是读写、读写、读。</p><h2 id="3-文件的特殊权限"><a href="#3-文件的特殊权限" class="headerlink" title="3.文件的特殊权限"></a>3.文件的特殊权限</h2><h3 id="3-1-SUID"><a href="#3-1-SUID" class="headerlink" title="3.1 SUID"></a>3.1 SUID</h3><p>SUID 可以让二进制程序的执行者临时拥有属主的权限 （就是root） </p><p>平时用户的密码是存储在shadow文件中，通过查看可以发现，其他人对shadow三个权限都没有，那普通用户为什么可以通过passwd命令更改自己的密码呢？就是因为在passwd加上了SUID 特殊权限位  ，这样就可以使得普通用户在使用passwd命令时暂时地获得root权限，进行密码更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# ls -l &#x2F;etc&#x2F;shadow</span><br><span class="line">-rw-r----- 1 root shadow 1393 7月  14 23:26 &#x2F;etc&#x2F;shadow</span><br></pre></td></tr></table></figure><h3 id="3-2-SGID"><a href="#3-2-SGID" class="headerlink" title="3.2 SGID"></a>3.2 SGID</h3><p>SGID和SUID很像，只是SGID临时获得的是组的全线</p><p>SGID 主要实现如下两种功能：</p><blockquote><p><strong>(1)</strong>让执行者临时拥有属组的权限（对拥有执行权限的二进制程序进行设置）。<br><strong>(2)</strong>在某个目录中创建的文件自动继承该目录的用户组（只可以对目录进行设置）。</p></blockquote><p>  <strong>功能（1）例子</strong>：创建public_tian目录，并且更改目录权限</p><p>下面用到<strong>chmod</strong> 命令，能够用来设置文件或目录的权限，格式为“chmod [参数] 权限 文件或目录名称”。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建public_tian目录</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# mkdir public_tian</span><br><span class="line"># 查看权限</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# ls -ald public_tian</span><br><span class="line">drwxr-xr-x 2 root root 4096 7月  15 13:08 public_tian</span><br><span class="line"># 更改目录的权限为777，即rwxrwxrwx，</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# chmod -Rf 777 public_tian</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# ls -ald public_tian</span><br><span class="line">drwxrwxrwx 2 root root 4096 7月  15 13:08 public_tian</span><br><span class="line"># 添加SGID权限位</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# chmod -Rf g+s public_tian</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# ls -ald public_tian</span><br><span class="line">drwxrwsrwx 2 root root 4096 7月  15 13:08 public_tian</span><br></pre></td></tr></table></figure><p><strong>功能（2）例子</strong>：</p><p>使用命令为 chown，其格式为“chown [参数] 所有者:所属组 文件或目录名称”。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:&#x2F;home# ls -ald zhu</span><br><span class="line">drwxrwxrwx 2 root root 4096 7月  15 14:02 zhu</span><br><span class="line"># 将目录zhu的所有者和所属组更改为zhu</span><br><span class="line">root@tian-virtual-machine:&#x2F;home# chown zhu:zhu &#x2F;home&#x2F;zhu</span><br><span class="line">root@tian-virtual-machine:&#x2F;home# ls -ald zhu</span><br><span class="line">drwxrwxrwx 2 zhu zhu 4096 7月  15 14:02 zhu</span><br></pre></td></tr></table></figure><h3 id="3-3-SBIT"><a href="#3-3-SBIT" class="headerlink" title="3.3 SBIT"></a>3.3 SBIT</h3><p>SBIT 特殊权限位可确保用户只能删除自己的文件，而不能删除其他用户的文件。  </p><p>想对其他目录来设置 SBIT 特殊权限位，用 chmod 命令就可以了。对应的参数 o+t 代表设置 SBIT 粘滞位权限  </p><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;zhu# ls -ald new</span><br><span class="line">drwxr-xr-x 2 root root 4096 7月  15 14:50 new</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;zhu# chmod -R o+t new</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;zhu# ls -ald new</span><br><span class="line">drwxr-xr-t 2 root root 4096 7月  15 14:50 new</span><br></pre></td></tr></table></figure><h2 id="4-文件的隐藏属性"><a href="#4-文件的隐藏属性" class="headerlink" title="4.文件的隐藏属性"></a>4.文件的隐藏属性</h2><h3 id="4-1-chattr-命令"><a href="#4-1-chattr-命令" class="headerlink" title="4.1 chattr 命令"></a>4.1 chattr 命令</h3><p>chattr 命令用于设置文件的隐藏权限，格式为“chattr [参数] 文件”。  </p><p>如果想要把某个隐藏功能添加到文件上，则需要在命令后面追加“+参数”，如果想要把某个隐藏功能移出文件，则需要追加“-参数”。  </p><div align="center">chattr 命令中用于隐藏权限的参数及其作用   </div><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>i</td><td>无法对文件进行修改；若对目录设置了该参数，则仅能修改其中的子文件内容而 不能新建或删除文件</td></tr><tr><td>a</td><td>仅允许补充（追加）内容，无法覆盖/删除内容（Append Only）</td></tr><tr><td>S</td><td>文件内容在变更后立即同步到硬盘（sync）</td></tr><tr><td>s</td><td>彻底从硬盘中删除，不可恢复（用 0 填充原文件所在硬盘区域）</td></tr><tr><td>A</td><td>不再修改这个文件或目录的最后访问时间（atime）</td></tr><tr><td>b</td><td>不再修改文件或目录的存取时间</td></tr><tr><td>D</td><td>检查压缩文件中的错误</td></tr><tr><td>d</td><td>使用 dump 命令备份时忽略本文件/目录</td></tr><tr><td>c</td><td>默认将文件或目录进行压缩</td></tr><tr><td>u</td><td>当删除该文件后依然保留其在硬盘中的数据，方便日后恢复</td></tr><tr><td>t</td><td>让文件系统支持尾部合并（tail-merging）</td></tr><tr><td>X</td><td>可以直接访问压缩文件中的内容</td></tr></tbody></table><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 查看目录，tian.txt存在</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# ls</span><br><span class="line">hh.txt  public_tian  tian  tiana.sh  tian.gz  tian.txt  users_test.txt  zhu  公共的  模板  视频  图片  文档  下载  音乐  桌面</span><br><span class="line"># 使用chattr给tian.txt添加+a参数</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# chattr +a tian.txt</span><br><span class="line"># 尝试删除，无法删除</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# rm tian.txt</span><br><span class="line">rm: 无法删除&#39;tian.txt&#39;: 不允许的操作</span><br><span class="line"># 利用-a参数将限制去掉</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# chattr -a tian.txt</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# rm tian.txt</span><br><span class="line"># 查看目录，tian.txt已经被删除</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# ls</span><br><span class="line">hh.txt  public_tian  tian  tiana.sh  tian.gz  users_test.txt  zhu  公共的  模板  视频  图片  文档  下载  音乐  桌面</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian#</span><br></pre></td></tr></table></figure><h3 id="4-2-lsattr-命令"><a href="#4-2-lsattr-命令" class="headerlink" title="4.2 lsattr 命令"></a>4.2 lsattr 命令</h3><p>lsattr 命令用于显示文件的隐藏权限，格式为“lsattr [参数] 文件”。  </p><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# touch tian.txt</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# chattr +a tian.txt</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# lsattr tian.txt</span><br><span class="line">-----a--------e--- tian.txt</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# chattr -a tian.txt</span><br><span class="line">root@tian-virtual-machine:&#x2F;home&#x2F;tian# lsattr tian.txt</span><br><span class="line">--------------e--- tian.txt</span><br></pre></td></tr></table></figure><h2 id="5-文件访问控制列表"><a href="#5-文件访问控制列表" class="headerlink" title="5.文件访问控制列表"></a>5.文件访问控制列表</h2><p>如果希望对某个指定的用户进行单独的权限控制，就需要用到文件的访问控制列表（ACL）了。  </p><h3 id="5-1-setfacl-命令"><a href="#5-1-setfacl-命令" class="headerlink" title="5.1 setfacl 命令"></a>5.1 setfacl 命令</h3><ul><li><p>setfacl 命令用于管理文件的 ACL 规则，格式为“setfacl [参数] 文件名称”。  </p></li><li><p>使用 setfacl 命令可以针对单一用户或用户组、单一文件或目录来进行读/写/执行权限的控制。  </p></li><li><p>针对目录文件需要使用-R 递归参数；针对普通文件则使用-m 参数；如果想要删除某个文件的 ACL，则可以使用-b 参数。  </p></li></ul><h3 id="5-2-getfacl-命令"><a href="#5-2-getfacl-命令" class="headerlink" title="5.2 getfacl 命令"></a>5.2 getfacl 命令</h3><p>getfacl 命令用于显示文件上设置的 ACL 信息，格式为“getfacl 文件名称”。  </p><p><strong>例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# getfacl &#x2F;home&#x2F;tian&#x2F;zhu</span><br><span class="line">getfacl: 从绝对路径名尾部去除&quot; &#x2F; &quot;字符。</span><br><span class="line"># file: home&#x2F;tian&#x2F;zhu</span><br><span class="line"># owner: root</span><br><span class="line"># group: root</span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure><h2 id="6-su-命令与-sudo-服务"><a href="#6-su-命令与-sudo-服务" class="headerlink" title="6. su 命令与 sudo 服务"></a>6. su 命令与 sudo 服务</h2><h3 id="6-1-su-命令"><a href="#6-1-su-命令" class="headerlink" title="6.1 su 命令"></a>6.1 su 命令</h3><p>su 命令可以切换用户身份，使得当前用户在不退出登录的情况下，顺畅地切换到其他用户，比如从 root 管理员切换至普通用户：</p><p><strong>例子</strong>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@tian-virtual-machine:~# su - zhu</span><br><span class="line">$ su - root</span><br><span class="line">密码： </span><br><span class="line">root@tian-virtual-machine:~#</span><br></pre></td></tr></table></figure><p>上面的 su 命令与用户名之间有一个减号（-），这意味着完全切换到新的用户，即把环境变量信息也变更为新用户的相应信息，而不是保留原始的信息。强烈建议在切换用户身份时添加这个减号（-）。  </p><h3 id="6-2-sudo-服务"><a href="#6-2-sudo-服务" class="headerlink" title="6.2 sudo 服务"></a>6.2 sudo 服务</h3><p>普通用户可以完全切换到 root 管理员身份来完成相应工作，但这将暴露 root 管理员的密码，从而增大了系统密码被黑客获取的几率；这并不是最安全的方案。  </p><p>sudo 命令用于给普通用户提供额外的权限来完成原本 root 管理员才能完成的任务，格式为“sudo [参数] 命令名称”。  </p><div align="center"> sudo 服务中的可用参数以及作用 </div>  <table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-h</td><td>列出帮助信息</td></tr><tr><td>-l</td><td>列出当前用户可执行的命令</td></tr><tr><td>-u 用户名或 UID 值</td><td>以指定的用户身份执行命令</td></tr><tr><td>-k</td><td>清空密码的有效时间，下次执行 sudo 时需要再次进行密码验证</td></tr><tr><td>-b</td><td>在后台执行指定的命令</td></tr><tr><td>-p</td><td>更改询问密码的提示语</td></tr></tbody></table><h1 id="第六章——存储结构与磁盘划分"><a href="#第六章——存储结构与磁盘划分" class="headerlink" title="第六章——存储结构与磁盘划分"></a>第六章——存储结构与磁盘划分</h1><h2 id="1-常见的目录"><a href="#1-常见的目录" class="headerlink" title="1.常见的目录"></a>1.常见的目录</h2><div align="center"> Linux 系统中常见的目录名称以及相应内容  </div><table><thead><tr><th>目录名称</th><th>应放置文件的内容</th></tr></thead><tbody><tr><td>/boot</td><td>开机所需文件—内核、开机菜单以及所需配置文件等</td></tr><tr><td>/dev</td><td>以文件形式存放任何设备与接口</td></tr><tr><td>/etc</td><td>配置文件</td></tr><tr><td>/home</td><td>用户家目录</td></tr><tr><td>/bin</td><td>存放单用户模式下还可以操作的命令</td></tr><tr><td>/lib</td><td>开机时用到的函数库，以及/bin 与/sbin 下面的命令要调用的函数</td></tr><tr><td>/sbin</td><td>开机过程中需要的命令</td></tr><tr><td>/media</td><td>用于挂载设备文件的目录</td></tr><tr><td>/opt</td><td>放置第三方的软件</td></tr><tr><td>/root</td><td>系统管理员的家目录</td></tr><tr><td>/srv</td><td>一些网络服务的数据文件目录</td></tr><tr><td>/tmp</td><td>任何人均可使用的“共享”临时目录</td></tr><tr><td>/proc</td><td>虚拟文件系统，例如系统内核、进程、外部设备及网络状态等</td></tr><tr><td>/usr/local</td><td>用户自行安装的软件</td></tr><tr><td>/usr/sbin</td><td>Linux 系统开机时不会使用到的软件/命令/脚本</td></tr><tr><td>/usr/share</td><td>帮助与说明文件，也可放置共享文件</td></tr><tr><td>/var</td><td>主要存放经常变化的文件，如日志</td></tr><tr><td>/lost+found</td><td>当文件系统发生错误时，将一些丢失的文件片段存放在这里</td></tr></tbody></table><ul><li>绝对路径指的是从根目录（/）开始写起的文件或目录名称</li></ul><h2 id="2-物理设备的命名规则"><a href="#2-物理设备的命名规则" class="headerlink" title="2.物理设备的命名规则"></a>2.物理设备的命名规则</h2><div align="center">常见的硬件设备及其文件名称  </div><table><thead><tr><th>硬件设备</th><th>文件名称</th></tr></thead><tbody><tr><td>IDE 设备</td><td>/dev/hd[a-d]</td></tr><tr><td>SCSI/SATA/U 盘</td><td>/dev/sd[a-p]</td></tr><tr><td>软驱</td><td>/dev/fd[0-1]</td></tr><tr><td>打印机</td><td>/dev/lp[0-15]</td></tr><tr><td>光驱</td><td>/dev/cdrom</td></tr><tr><td>鼠标</td><td>/dev/mouse</td></tr><tr><td>磁带机</td><td>/dev/st0 或/dev/ht0</td></tr></tbody></table><h2 id="3-文件系统与数据资料"><a href="#3-文件系统与数据资料" class="headerlink" title="3.文件系统与数据资料"></a>3.文件系统与数据资料</h2><p>这一章剩下的暂时省略，学下面的先</p><h1 id="第七章——使用-RAID-与-LVM-磁盘阵列技术"><a href="#第七章——使用-RAID-与-LVM-磁盘阵列技术" class="headerlink" title="第七章——使用 RAID 与 LVM 磁盘阵列技术"></a>第七章——使用 RAID 与 LVM 磁盘阵列技术</h1><p>也先省略</p><h1 id="第八章——iptables-与-firewalld-防火墙"><a href="#第八章——iptables-与-firewalld-防火墙" class="headerlink" title="第八章——iptables 与 firewalld 防火墙"></a>第八章——iptables 与 firewalld 防火墙</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo功能设置</title>
      <link href="/2020/07/20/Hexo%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/07/20/Hexo%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这里有一些hexo功能的使用方法以及注意点（我踩过的坑…）<a id="more"></a></p><h1 id="如何给文章添加标签"><a href="#如何给文章添加标签" class="headerlink" title="如何给文章添加标签"></a>如何给文章添加标签</h1><h2 id="1-建立一个标签配置文件"><a href="#1-建立一个标签配置文件" class="headerlink" title="1.建立一个标签配置文件"></a>1.建立一个标签配置文件</h2><blockquote><p>在博客文件夹下，执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>执行后，会在source文件夹里创建一个tags文件夹，tags文件夹里会生成一个index.md文件，这个文件是用来配置你的标签的，文件内容参考下面的样例进行更改</p><p><strong>注意</strong>：冒号“:”后面要有一个空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客搭建与运营</span><br><span class="line">date: 2020-07-05 01:04:45</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>如上所示，<strong>title</strong>对应你的标签名，你想要啥名字就写啥。<strong>type: “tags”</strong>是用来说明这是在配置标签的，不要改动。</p></blockquote><h2 id="2-给文章添加标签"><a href="#2-给文章添加标签" class="headerlink" title="2.给文章添加标签"></a>2.给文章添加标签</h2><blockquote><p>打开文章，在文章开头添加下列文本。这里的tags后面就是你希望这个文章打上的标签名</p><p><strong>注意</strong>：冒号“:”后面要有一个空格，不然“tags: [博客搭建与运营]”会被当成文章内容显示，并且不会归类到[博客搭建与运营]标签上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">tags: [博客搭建与运营]</span><br><span class="line">---</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建与运营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/20/hello-world/"/>
      <url>/2020/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<div align="center">————欢迎来到我的博客~————</di<a id="more"></a><img src="http://tetedetian.oss-cn-shenzhen.aliyuncs.com/img/wallls.com_220462.jpg" alt="wallls.com_220462" style="zoom:50%;" /><p>​                                                      </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
